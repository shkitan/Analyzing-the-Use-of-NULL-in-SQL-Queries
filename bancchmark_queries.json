{
    "1": "SELECT pg_catalog.set_config('search_path', '', false);",
    "2": "Owner: postgres\n--\n\nCREATE PROCEDURE public.create_game(INOUT new_host_connection_id character varying)\n    LANGUAGE sql\n    AS $$\n\tWITH new_game_id_holder (new_game_id) AS (\n\t\tSELECT n.random_number\n\t\tFROM (\n\t\t\tSELECT LPAD(FLOOR(random() * 10000)::varchar, 4, '0') AS random_number\n\t\t\tFROM generate_series(1, (SELECT COUNT(*) FROM public.games) + 10)\n\t\t) AS n\n\t\tLEFT OUTER JOIN \n\t\t\tpublic.games AS g on g.game_id = n.random_number\n\t\tWHERE g.id IS NULL\n\t\tLIMIT 1\n\t)\n\tINSERT INTO public.games (\n\t\tgame_id,\n\t\thost_connection_id\n\t)\n\tVALUES ( \n\t\t(SELECT new_game_id FROM new_game_id_holder),\n\t\tnew_host_connection_id\n\t)\n\tRETURNING game_id;",
    "3": "insert into\n      public.deps_saved_ddl(src_nsp_name, src_rel_name, dep_nsp_name, dep_rel_name, ddl_order, ddl_statement)\n    select distinct\n      p_src_nsp_name,\n      p_src_rel_name,\n      v_curr.obj_schema,\n      v_curr.obj_name,\n      nextval(v_sequence::regclass),\n      indexdef\n    from\n      pg_indexes\n    where\n      schemaname = v_curr.obj_schema and\n      tablename = v_curr.obj_name;",
    "4": "insert into\n      public.deps_saved_ddl(src_nsp_name, src_rel_name, dep_nsp_name, dep_rel_name, ddl_order, ddl_statement)\n    select distinct\n      p_src_nsp_name,\n      p_src_rel_name,\n      v_curr.obj_schema,\n      v_curr.obj_name,\n      nextval(v_sequence::regclass),\n      definition\n    from\n      pg_rules\n    where\n      schemaname = v_curr.obj_schema and\n      tablename = v_curr.obj_name;",
    "5": "insert into\n      public.deps_saved_ddl(src_nsp_name, src_rel_name, dep_nsp_name, dep_rel_name, ddl_order, ddl_statement)\n    select\n      p_src_nsp_name,\n      p_src_rel_name,\n      v_curr.obj_schema,\n      v_curr.obj_name,\n      nextval(v_sequence::regclass),\n      format(\n        'COMMENT ON COLUMN %I.%I.%I IS %L',\n        pn.nspname,\n        pc.relname,\n        pa.attname,\n        pd.description\n      )\n    from\n      pg_class pc\n        inner join pg_namespace pn\n          on pn.oid = pc.relnamespace and\n             pn.nspname = v_curr.obj_schema\n        inner join pg_attribute pa\n          on pc.oid = pa.attrelid\n        inner join pg_description pd\n          on pd.objoid = pc.oid and\n             pd.objsubid = pa.attnum and\n             pd.description is not null\n    where\n      pc.relname = v_curr.obj_name;",
    "6": "SELECT * FROM CUSTOMERS;",
    "7": "SELECT * FROM CUSTOMERS;",
    "8": "-- ======================================== END SLOW Queries =======================================\n\n\n\n-- ====================================== START OPEN Connection ====================================\n\n-- Get a count of SQL connections by IP address\n\nSELECT 'OPEN Connection' 'OPEN_CONNECTION', ec.client_net_address, es.[program_name], \n\nes.[host_name], es.login_name, \n\nCOUNT(ec.session_id) AS [connection count] \n\nFROM sys.dm_exec_sessions AS es  \n\nINNER JOIN sys.dm_exec_connections AS ec  \n\nON es.session_id = ec.session_id   \n\nGROUP BY ec.client_net_address, es.[program_name], es.[host_name], es.login_name  \n\nORDER BY ec.client_net_address, es.[program_name];",
    "9": "-- ====================================== END OPEN Connection ====================================\n\n\n\n-- ===================================== START MOST USED SP AND Functions ========================\n\nSELECT DISTINCT  o.name ObjectName, deqs.execution_count\n\nFROM sys.dm_exec_query_stats deqs\n\nCROSS APPLY sys.dm_exec_sql_text (deqs.sql_handle) dest\n\nJOIN sys.objects o ON o.object_id = dest.objectid\n\nWHERE dest.dbid = DB_ID()\n\nORDER BY deqs.execution_count desc\n\n-- ===================================== END MOST USED SP AND Functions ========================\n\n\n\n-- ===================================== START Missing Dependencies ============================\n\nselect\n\n\t'Error' 'Error',\n\n    object_name(referencing_id) as 'object making reference',\n\n    referenced_class_desc,\n\n    referenced_schema_name,\n\n    referenced_entity_name as 'object name referenced',\n\n    o.name as 'Object Not Found'\n\nfrom sys.sql_expression_dependencies e\n\n\tleft join sys.objects o on o.name = e.referenced_entity_name\n\n    left join sys.tables t\n\n    on e.referenced_entity_name = t.name\n\n    WHERE o.object_id IS NULL\n\n-- ===================================== END Missing Dependencies ============================;",
    "10": "/* 21-1. Capturing Executing Queries */\n\nSELECT r.session_id, r.status, r.start_time, r.command, s.text\nFROM sys.dm_exec_requests r\nCROSS APPLY sys.dm_exec_sql_text(r.sql_handle) s\nWHERE r.status = 'running';",
    "11": "SELECT BusinessEntityID\nFROM Purchasing.vVendorWithContacts\nWHERE EmailAddress = 'stuart2@adventure-works.com';",
    "12": "SELECT BusinessEntityID\nFROM Purchasing.vVendorWithContacts\nWHERE EmailAddress = 'suzanne0@adventure-works.com';",
    "13": "/* 21-10. Forcing Use of a Query Plan */\n\nSET STATISTICS XML ON\nSELECT TOP 10 Rate\nFROM HumanResources.EmployeePayHistory\nORDER BY Rate DESC\nSET STATISTICS XML OFF\n\n--forcing a plan use\nUSE AdventureWorks2012;",
    "14": "\" StatementId=\"1\" StatementCompId=\"2\" StatementType=\"SELECT\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.019825\" StatementEstRows=\"10\" StatementOptmLevel=\"TRIVIAL\" QueryHash=\"0x2B741030C68225F9\" QueryPlanHash=\"0x705E7CF258D9C17E\">\n          <StatementSetOptions QUOTED_IDENTIFIER=\"true\" ARITHABORT=\"true\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\" />\n          <QueryPlan DegreeOfParallelism=\"1\" MemoryGrant=\"1024\" CachedPlanSize=\"16\" CompileTime=\"1\" CompileCPU=\"1\" CompileMemory=\"96\">\n            <MemoryGrantInfo SerialRequiredMemory=\"16\" SerialDesiredMemory=\"24\" RequiredMemory=\"16\" DesiredMemory=\"24\" RequestedMemory=\"1024\" GrantWaitTime=\"0\" GrantedMemory=\"1024\" MaxUsedMemory=\"16\" />\n            <OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"104190\" EstimatedPagesCached=\"52095\" EstimatedAvailableDegreeOfParallelism=\"4\" />\n            <RelOp NodeId=\"0\" PhysicalOp=\"Sort\" LogicalOp=\"TopN Sort\" EstimateRows=\"10\" EstimateIO=\"0.0112613\" EstimateCPU=\"0.00419345\" AvgRowSize=\"15\" EstimatedTotalSubtreeCost=\"0.019825\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\">\n              <OutputList>\n                <ColumnReference Database=\"[AdventureWorks2012]\" Schema=\"[HumanResources]\" Table=\"[EmployeePayHistory]\" Column=\"Rate\" />\n              </OutputList>\n              <MemoryFractions Input=\"1\" Output=\"1\" />\n              <RunTimeInformation>\n                <RunTimeCountersPerThread Thread=\"0\" ActualRows=\"10\" ActualRebinds=\"1\" ActualRewinds=\"0\" ActualEndOfScans=\"1\" ActualExecutions=\"1\" />\n              </RunTimeInformation>\n              <TopSort Distinct=\"0\" Rows=\"10\">\n                <OrderBy>\n                  <OrderByColumn Ascending=\"0\">\n                    <ColumnReference Database=\"[AdventureWorks2012]\" Schema=\"[HumanResources]\" Table=\"[EmployeePayHistory]\" Column=\"Rate\" />\n                  </OrderByColumn>\n                </OrderBy>\n                <RelOp NodeId=\"1\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"316\" EstimateIO=\"0.00386574\" EstimateCPU=\"0.0005046\" AvgRowSize=\"15\" EstimatedTotalSubtreeCost=\"0.00437034\" TableCardinality=\"316\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\">\n                  <OutputList>\n                    <ColumnReference Database=\"[AdventureWorks2012]\" Schema=\"[HumanResources]\" Table=\"[EmployeePayHistory]\" Column=\"Rate\" />\n                  </OutputList>\n                  <RunTimeInformation>\n                    <RunTimeCountersPerThread Thread=\"0\" ActualRows=\"316\" ActualEndOfScans=\"1\" ActualExecutions=\"1\" />\n                  </RunTimeInformation>\n                  <IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\">\n                    <DefinedValues>\n                      <DefinedValue>\n                        <ColumnReference Database=\"[AdventureWorks2012]\" Schema=\"[HumanResources]\" Table=\"[EmployeePayHistory]\" Column=\"Rate\" />\n                      </DefinedValue>\n                    </DefinedValues>\n                    <Object Database=\"[AdventureWorks2012]\" Schema=\"[HumanResources]\" Table=\"[EmployeePayHistory]\" Index=\"[PK_EmployeePayHistory_BusinessEntityID_RateChangeDate]\" IndexKind=\"Clustered\" />\n                  </IndexScan>\n                </RelOp>\n              </TopSort>\n            </RelOp>\n          </QueryPlan>\n        </StmtSimple>\n      </Statements>\n    </Batch>\n  </BatchSequence>\n</ShowPlanXML>');",
    "15": "-- Inserted rows\n       INSERT   Production.ProductInventoryAudit\n                (ProductID,\n                 LocationID,\n                 Shelf,\n                 Bin,\n                 Quantity,\n                 rowguid,\n                 ModifiedDate,\n                 InsertOrDelete)\n                SELECT DISTINCT\n                        i.ProductID,\n                        i.LocationID,\n                        i.Shelf,\n                        i.Bin,\n                        i.Quantity,\n                        i.rowguid,\n                        GETDATE(),\n                        'I'\n                FROM    inserted i\n                UNION ALL\n                SELECT  d.ProductID,\n                        d.LocationID,\n                        d.Shelf,\n                        d.Bin,\n                        d.Quantity,\n                        d.rowguid,\n                        GETDATE(),\n                        'D'\n                FROM    deleted d;",
    "16": "-- Check the audit table\nSELECT  ProductID,\n        LocationID,\n        InsertOrDelete\nFROM    Production.ProductInventoryAudit;",
    "17": "-- Check the view's contents \nSELECT  Status,\n        Name\nFROM    HumanResources.vw_Department\nWHERE   GroupName = 'Manufacturing';",
    "18": "END\n-- Inserted rows\n       INSERT   Production.ProductInventoryAudit\n                (ProductID,\n                 LocationID,\n                 Shelf,\n                 Bin,\n                 Quantity,\n                 rowguid,\n                 ModifiedDate,\n                 InsertOrDelete)\n                SELECT DISTINCT\n                        i.ProductID,\n                        i.LocationID,\n                        i.Shelf,\n                        i.Bin,\n                        i.Quantity,\n                        i.rowguid,\n                        GETDATE(),\n                        'I'\n                FROM    inserted i;",
    "19": "-- Deleted rows\n       INSERT   Production.ProductInventoryAudit\n                (ProductID,\n                 LocationID,\n                 Shelf,\n                 Bin,\n                 Quantity,\n                 rowguid,\n                 ModifiedDate,\n                 InsertOrDelete)\n                SELECT  d.ProductID,\n                        d.LocationID,\n                        d.Shelf,\n                        d.Bin,\n                        d.Quantity,\n                        d.rowguid,\n                        GETDATE(),\n                        'D'\n                FROM    deleted d;",
    "20": "-- 19-5. Viewing DML Trigger Metadata\n-- Show the DML triggers in the current database \nSELECT  OBJECT_NAME(parent_id) Table_or_ViewNM,\n        name TriggerNM,\n        is_instead_of_trigger,\n        is_disabled\nFROM    sys.triggers\nWHERE   parent_class_desc = 'OBJECT_OR_COLUMN'\nORDER BY OBJECT_NAME(parent_id),\n        Name;",
    "21": "SELECT  name,\n        s.type_desc S0L_or_CLR,\n        is_disabled,\n        e.type_desc FiringEvents\nFROM    sys.server_triggers s\n        INNER JOIN sys.server_trigger_events e\n            ON s.object_id = e.object_id;",
    "22": "SELECT  t.name,\n        m.Definition\nFROM    sys.triggers AS t\n        INNER JOIN sys.sql_modules m\n            ON t.object_id = m.object_id\nWHERE   t.parent_class_desc = 'DATABASE';",
    "23": "SELECT  t.name,\n        m.definition\nFROM    sys.server_sql_modules m\n        INNER JOIN sys.server_triggers t\n            ON m.object_id = t.object_id;",
    "24": "-- View the db setting\nSELECT  is_recursive_triggers_on\nFROM    sys.databases\nWHERE   name = 'AdventureWorks2012';",
    "25": "-- View the db setting\nSELECT  is_recursive_triggers_on\nFROM    sys.databases\nWHERE   name = 'AdventureWorks2012';",
    "26": "SELECT  WebSitePage,\n        HitDate,\n        $PARTITION.HitsDateRange (HitDate) AS [Partition]\nFROM    dbo.WebSiteHits;",
    "27": "SELECT  WebSitePage,\n        HitDate,\n        $PARTITION.HitsDateRange(HitDate) Partition\nFROM    dbo.WebSiteHits;",
    "28": "SELECT  WebSitePage,\n        HitDate,\n        $PARTITION.HitsDateRange(HitDate) Partition\nFROM    dbo.WebSiteHitsHistory;",
    "29": "SELECT  WebSiteHitId,\n        WebSitePage,\n        HitDate,\n        $PARTITION.HitsDateRange(HitDate) Partition\nFROM    dbo.WebSiteHitsImport;",
    "30": "SELECT  WebSiteHitId,\n        WebSitePage,\n        HitDate,\n        $PARTITION.HitsDateRange(HitDate) Partition\nFROM    dbo.WebSiteHitsImport;",
    "31": "Select @DeviceName = b.physical_device_name\n    From msdb.dbo.backupset a\n        INNER JOIN msdb.dbo.backupmediafamily b\n        ON a.media_set_id = b.media_set_id\n    Where a.database_name = 'TestDB'\n        And a.type = 'D'\n        And Convert(Varchar,a.backup_start_date,112) = Convert(Varchar,GetDate(),112);",
    "32": "Select @DeviceName = b.physical_device_name\n    From msdb.dbo.backupset a\n        INNER JOIN msdb.dbo.backupmediafamily b\n        ON a.media_set_id = b.media_set_id\n    Where a.database_name = 'TestDB'\n        And a.type = 'D'\n        And Convert(Varchar,a.backup_start_date,112) = Convert(Varchar,GetDate(),112);",
    "33": "Select @DeviceName = b.physical_device_name\n\tFrom msdb.dbo.backupset a\n\t\tINNER JOIN msdb.dbo.backupmediafamily b\n\t\t\tON a.media_set_id = b.media_set_id\n\tWhere a.database_name = 'TrainingDB'\n\t\tAnd a.type = 'D'\n\t\tAnd Convert(Varchar,a.backup_start_date,112) = Convert(Varchar,GetDate(),112);",
    "34": "SELECT *\nFROM People\nWHERE LastName = 'Abercrombie';",
    "35": "SELECT COUNT(*) FROM Person.Person;",
    "36": "SELECT @sql_command = 'SELECT SUSER_SNAME();",
    "37": "SELECT COUNT(*) FROM Person.Person';",
    "38": "SELECT SUSER_SNAME() AS SUSER_SNAME, USER_NAME() AS USER_NAME, ORIGINAL_LOGIN() AS ORIGINAL_LOGIN;",
    "39": "SELECT COUNT(*) AS table_count_no_dynamic_sql FROM Person.Person;",
    "40": "SELECT @sql_command = 'SELECT SUSER_SNAME() AS security_context_in_dynamic_sql;",
    "41": "SELECT COUNT(*) AS table_count_in_dynamic_sql FROM Person.Person';",
    "42": "SELECT COUNT(*) AS table_count_no_dynamic_sql FROM Person.Person;",
    "43": "SELECT @sql_command = 'SELECT SUSER_SNAME() AS security_context_in_dynamic_sql;",
    "44": "SELECT COUNT(*) AS table_count_in_dynamic_sql FROM Person.Person';",
    "45": "SELECT COUNT(*) AS table_count_no_dynamic_sql FROM Person.Person;",
    "46": "SELECT @sql_command = 'EXECUTE AS LOGIN = ''EdwardJr'';",
    "47": "SELECT SUSER_SNAME() AS security_context_in_dynamic_sql;",
    "48": "SELECT COUNT(*) AS table_count_in_dynamic_sql FROM Person.Person';",
    "49": "INSERT INTO @databases\n\t\t(database_name)\n\tSELECT\n\t\tname\n\tFROM sys.databases\n\tWHERE name NOT IN ('msdb', 'model', 'tempdb')\n\tAND state_desc <> 'OFFLINE';",
    "50": "-- Tables\n\t\tINSERT INTO #object_data\n\t\t\t(database_name, schemaname, table_name, objectname, object_type)\n\t\tSELECT\n\t\t\tdb_name() AS database_name,\n\t\t\tschemas.name AS schema_name,\n\t\t\ttables.name AS table_name,\n\t\t\ttables.name AS objectname,\n\t\t\t''Table'' AS object_type\n\t\tFROM sys.tables\n\t\tINNER JOIN sys.schemas\n\t\tON schemas.schema_id = tables.schema_id\n\t\tWHERE tables.name LIKE ''' + @searchString + ''';",
    "51": "-- Columns\n\t\tINSERT INTO #object_data\n\t\t\t(database_name, schemaname, table_name, objectname, object_type)\n\t\tSELECT\n\t\t\tdb_name() AS database_name,\n\t\t\tschemas.name AS schema_name,\n\t\t\ttables.name AS table_name,\n\t\t\tcolumns.name AS objectname,\n\t\t\t''Column'' AS object_type\n\t\tFROM sys.tables\n\t\tINNER JOIN sys.columns\n\t\tON tables.object_id = columns.object_id\n\t\tINNER JOIN sys.schemas\n\t\tON schemas.schema_id = tables.schema_id\n\t\tWHERE columns.name LIKE ''' + @searchString + ''';",
    "52": "-- Schemas\n\t\tINSERT INTO #object_data\n\t\t\t(database_name, schemaname, table_name, objectname, object_type)\n\t\tSELECT\n\t\t\tdb_name() AS database_name,\n\t\t\tschemas.name AS schema_name,\n\t\t\tNULL AS table_name,\n\t\t\tschemas.name AS objectname,\n\t\t\t''Schema'' AS object_type\n\t\tFROM sys.schemas\n\t\tWHERE schemas.name LIKE ''' + @searchString + ''';",
    "53": "END\n\t\n\tSELECT\n\t\t*\n\tFROM #object_data;",
    "54": "SELECT\n\t* \nFROM #login_user_mapping \nORDER BY database_name,\n \t   user_name;",
    "55": "INSERT INTO @databases\n\t(database_name)\nSELECT\n\tdatabases.name\nFROM sys.databases;",
    "56": "SELECT @sql_command = @sql_command + '\nDBCC CHECKDB (' + database_name + ');",
    "57": "INSERT INTO @databases\n\t(database_name)\nSELECT\n\tdatabases.name\nFROM sys.databases\nWHERE databases.name <> 'tempdb';",
    "58": "SELECT @sql_command = @sql_command + '\n\t\tUSE [' + @current_database + ']\n\t\tINSERT INTO #tables\n\t\t\t(database_name, schema_name, table_name, row_count)\n\t\tSELECT\n\t\t\t''' + @current_database + ''',\n\t\t\tschemas.name,\n\t\t\ttables.name,\n\t\t\t0\n\t\tFROM sys.tables\n\t\tINNER JOIN sys.schemas\n\t\tON tables.schema_id = schemas.schema_id';",
    "59": "END\n\nSELECT @sql_command = '';",
    "60": "SELECT @sql_command = @sql_command + '\n\tUPDATE #tables\n\t\tSET row_count = (SELECT COUNT(*)\n\tFROM [' + database_name + '].[' + schema_name + '].[' + table_name + '])\n\tWHERE database_name = ''' + database_name + '''\n\tAND schema_name = ''' + schema_name + '''\n\tAND table_name = ''' + table_name + ''';",
    "61": "SELECT\n\t*\nFROM #tables;",
    "62": "INSERT INTO @databases\n\t(database_name)\nSELECT\n\tdatabases.name\nFROM sys.databases\nWHERE databases.name <> 'tempdb';",
    "63": "SELECT @sql_command = '';",
    "64": "SELECT @sql_command = @sql_command + '\n\t\tUSE [' + @current_database + ']\n\t\tINSERT INTO #tables\n\t\t\t(database_name, schema_name, table_name, row_count)\n\t\tSELECT\n\t\t\t''' + @current_database + ''',\n\t\t\tschemas.name,\n\t\t\ttables.name,\n\t\t\t0\n\t\tFROM sys.tables\n\t\tINNER JOIN sys.schemas\n\t\tON tables.schema_id = schemas.schema_id';",
    "65": "SELECT @sql_command = '';",
    "66": "SELECT @sql_command = @sql_command + '\n\t\tUPDATE #tables\n\t\t\tSET row_count = (SELECT COUNT(*)\n\t\tFROM [' + database_name + '].[' + schema_name + '].[' + table_name + '])\n\t\tWHERE database_name = ''' + database_name + '''\n\t\tAND schema_name = ''' + schema_name + '''\n\t\tAND table_name = ''' + table_name + ''';",
    "67": "END\n\nSELECT\n\t*\nFROM #tables;",
    "68": "-- Returns 5 rows\nSELECT\n\t*\nFROM dbo.employee_login;",
    "69": "SELECT\n\tCOUNT(*)\nFROM dbo.employee_login;",
    "70": "-- Returns 5 rows\nSELECT\n\t*\nFROM dbo.employee_login;",
    "71": "SELECT\n\tCOUNT(*)\nFROM dbo.employee_login;",
    "72": "-- Returns 5 rows\nSELECT\n\t*\nFROM dbo.employee_login;",
    "73": "SELECT\n\tCOUNT(*)\nFROM dbo.employee_login;",
    "74": "SELECT\n\t*\nFROM sys.security_policies;",
    "75": "SELECT\n\t*\nFROM sys.security_predicates;",
    "76": "SELECT @sql_command = 'SELECT TOP 10 * FROM Person.Person';",
    "77": "SELECT @sql_command = 'SELECT TOP 10 * FROM Person.Person';",
    "78": "SELECT @table_name = 'Person.Person';",
    "79": "SELECT @sql_command = 'SELECT TOP 10 * FROM ' + @table_name;",
    "80": "INSERT INTO @database_list\n\t(database_name)\nSELECT\n\tname\nFROM sys.databases\nWHERE name LIKE 'AdventureWorks%';",
    "81": "INSERT INTO @database_list\n\t(database_name)\nSELECT\n\tname\nFROM sys.databases\nWHERE name LIKE 'AdventureWorks%';",
    "82": "SELECT @CMD = 'SELLECT TOP 17 * FROM Person.Person';",
    "83": "INSERT INTO @database_list\n\t(database_name)\nSELECT\n\tname\nFROM sys.databases\nWHERE name LIKE 'AdventureWorks%';",
    "84": "-- First name as entered in search box\nSET @CMD = 'SELECT PERSON.FirstName,PERSON.LastName,PHONE.PhoneNumber,PTYPE.Name FROM Person.Person PERSON INNER JOIN Person.PersonPhone PHONE ON PERSON.BusinessEntityID = PHONE.BusinessEntityID INNER JOIN Person.PhoneNumberType PTYPE ON PHONE.PhoneNumberTypeID = PTYPE.PhoneNumberTypeID WHERE PERSON.FirstName = ''' + @first_name + '''';",
    "85": "SELECT @sql_command = 'SELECT COUNT(*) ' + 'FROM ' +  @schema + '.' + @table;",
    "86": "SELECT @sql_command = 'SELECT COUNT(*) ' + 'FROM ' +  ISNULL(@schema, 'Person') + '.' + @table;",
    "87": "SELECT @sql_command = CONCAT ('SELECT COUNT(*) ', 'FROM ', @schema, '.', @table);",
    "88": "SELECT @string;",
    "89": "SELECT LTRIM(@string);",
    "90": "SELECT RTRIM(@string);",
    "91": "SELECT TRIM(@string);",
    "92": "SELECT CHARINDEX('dinosaur', @string);",
    "93": "SELECT STUFF(@string, 5, 0, 'purple ');",
    "94": "SELECT STUFF(@string, 5, 11, 't-rex');",
    "95": "SELECT STUFF(@string, 32, 8, 'animal!');",
    "96": "SELECT REPLACE(@string, ' ', '');",
    "97": "SELECT REPLACE(REPLACE(@string, ' ', ''), ':', '');",
    "98": "SELECT REPLACE(REPLACE(REPLACE(REPLACE(@string, ' ', ''), ':', ''), 'AM', ''), 'PM', '');",
    "99": "SELECT TRANSLATE(@string, ';",
    "100": "SELECT SUBSTRING(@string, 1, 3);",
    "101": "SELECT REPLICATE(0, 20 - LEN(@serial_number)) + @serial_number;",
    "102": "SELECT REVERSE(@string);",
    "103": "INSERT  INTO @databases  \n\n--------------------------------------------------------------------------------------------------\n\n--only choose online databases \n\n--------------------------------------------------------------------------------------------------\n\n        SELECT  name\n\n        FROM    sys.databases\n\n        WHERE   state = 0;",
    "104": "--------------------------------------------------------------------------------------------------\n\n-- Output the full list  \n\n-------------------------------------------------------------------------------------------------- \n\n\n\nSELECT  dbname ,\n\n        vlfcount\n\nFROM    @vlfcounts\n\nORDER BY dbname;",
    "105": "Owner: Admin\n--\n\nSELECT pg_catalog.setval('vocabulary_id_seq', 19, true);",
    "106": "INSERT INTO planmateria(planestudio_id,materia_id)VALUES (\n\t\t\t(SELECT planestudio_id FROM planestudio WHERE carrera_id=\n\t\t\t\t(SELECT NEW.carrera_id FROM carrera WHERE carrera_id=NEW.carrera_id)\n\t\t\t\tAND ano_id=NEW.ano_id)\n\t\t\t,NEW.materia_id);",
    "107": "INSERT INTO programa(planmateria_id,ano_id,fecha,descripcion)\n\t\t\tVALUES ((SELECT planmateria_id FROM planmateria WHERE planestudio_id=(\n\t\t\t\tSELECT planestudio_id FROM planestudio WHERE carrera_id=NEW.carrera_id AND ano_id=NEW.ano_id)\n\t\t\t\tAND materia_id=NEW.materia_id),\n\t\t\t\tNEW.ano_id,(SELECT CURRENT_DATE),\n\t\t\t\t(SELECT CONCAT((SELECT nombre FROM instituto WHERE instituto_id=NEW.instituto_id),'-',\n\t\t\t\t(SELECT descripcion FROM carrera WHERE carrera_id=NEW.carrera_id),'-',\n\t\t\t\t(SELECT nombre FROM materia WHERE materia_id=NEW.materia_id),'-',\n\t\t\t\t(SELECT ano FROM ano WHERE ano_id=NEW.ano_id))));",
    "108": "SELECT * FROM chalky;",
    "109": "SELECT\n\n\t*\n\nFROM fact.Sale\n\nWHERE [Invoice Date Key] = '1/1/2016'\n\nAND [Sale Key] = 198840;",
    "110": "SELECT\n\n\tCOUNT(*),\n\n\tMIN([Invoice Date Key]),\n\n\tMAX([Invoice Date Key])\n\nFROM fact.Sale\n\nWHERE [Invoice Date Key] >= '1/1/2016';",
    "111": "SELECT\n\n\tCity.City,\n\n\tCity.[State Province],\n\n\tCity.Country,\n\n\tCOUNT(*)\n\nFROM fact.Sale\n\nINNER JOIN Dimension.City\n\nON City.[City Key] = Sale.[City Key]\n\nWHERE [Invoice Date Key] >= '1/1/2016'\n\nAND [Invoice Date Key] < '2/1/2016'\n\nGROUP BY City.City, City.[State Province], City.Country;",
    "112": "SELECT\n\n\tdatabases.compatibility_level\n\nFROM sys.databases\n\nWHERE databases.name = 'WideWorldImportersDW';",
    "113": "SELECT\n\n\tCity.City,\n\n\tCity.[State Province],\n\n\tCity.Country,\n\n\tCOUNT(*)\n\nFROM fact.Sale\n\nINNER JOIN Dimension.City\n\nON City.[City Key] = Sale.[City Key]\n\nWHERE [Invoice Date Key] >= '1/1/2016'\n\nAND [Invoice Date Key] < '2/1/2016'\n\nGROUP BY City.City, City.[State Province], City.Country;",
    "114": "-- Segment metadata joined back to the parent table, column, and index.\n\nSELECT\n\n\ttables.name AS table_name,\n\n\tindexes.name AS index_name,\n\n\tcolumns.name AS column_name,\n\n\tpartitions.partition_number,\n\n\tcolumn_store_segments.encoding_type,\n\n\tcolumn_store_segments.row_count,\n\n\tcolumn_store_segments.has_nulls,\n\n\tcolumn_store_segments.base_id,\n\n\tcolumn_store_segments.magnitude,\n\n\tcolumn_store_segments.min_data_id,\n\n\tcolumn_store_segments.max_data_id,\n\n\tcolumn_store_segments.null_value,\n\n\tcolumn_store_segments.on_disk_size\n\nFROM sys.column_store_segments\n\nINNER JOIN sys.partitions\n\nON column_store_segments.hobt_id = partitions.hobt_id\n\nINNER JOIN sys.indexes\n\nON indexes.index_id = partitions.index_id\n\nAND indexes.object_id = partitions.object_id\n\nINNER JOIN sys.tables\n\nON tables.object_id = indexes.object_id\n\nINNER JOIN sys.columns\n\nON tables.object_id = columns.object_id\n\nAND column_store_segments.column_id = columns.column_id\n\nWHERE tables.name = 'Sale_CCI'\n\nORDER BY columns.name, column_store_segments.segment_id;",
    "115": "SELECT\n\n\tobjects.name AS table_name,\n\n\tindexes.name AS index_name,\n\n\tdm_db_column_store_row_group_physical_stats.partition_number,\n\n\tdm_db_column_store_row_group_physical_stats.row_group_id,\n\n\tdm_db_column_store_row_group_physical_stats.state_desc,\n\n\tdm_db_column_store_row_group_physical_stats.total_rows,\n\n\tdm_db_column_store_row_group_physical_stats.deleted_rows,\n\n\tdm_db_column_store_row_group_physical_stats.size_in_bytes,\n\n\tdm_db_column_store_row_group_physical_stats.trim_reason_desc,\n\n\tdm_db_column_store_row_group_physical_stats.transition_to_compressed_state_desc,\n\n\tdm_db_column_store_row_group_physical_stats.has_vertipaq_optimization,\n\n\tdm_db_column_store_row_group_physical_stats.created_time\n\nFROM sys.dm_db_column_store_row_group_physical_stats\n\nINNER JOIN sys.objects\n\nON objects.object_id = dm_db_column_store_row_group_physical_stats.object_id\n\nINNER JOIN sys.indexes\n\nON indexes.object_id = dm_db_column_store_row_group_physical_stats.object_id\n\nAND indexes.index_id = dm_db_column_store_row_group_physical_stats.index_id\n\nWHERE objects.name = 'Sale_CCI';",
    "116": "SELECT\n\n\tobjects.name AS table_name,\n\n\tindexes.name AS index_name,\n\n\tdm_db_column_store_row_group_operational_stats.row_group_id,\n\n\tdm_db_column_store_row_group_operational_stats.index_scan_count,\n\n\tdm_db_column_store_row_group_operational_stats.scan_count,\n\n\tdm_db_column_store_row_group_operational_stats.delete_buffer_scan_count,\n\n\tdm_db_column_store_row_group_operational_stats.row_group_lock_count,\n\n\tdm_db_column_store_row_group_operational_stats.row_group_lock_wait_count,\n\n\tdm_db_column_store_row_group_operational_stats.row_group_lock_wait_in_ms,\n\n\tdm_db_column_store_row_group_operational_stats.returned_row_count\n\nFROM sys.dm_db_column_store_row_group_operational_stats\n\nINNER JOIN sys.objects\n\nON objects.object_id = dm_db_column_store_row_group_operational_stats.object_id\n\nINNER JOIN sys.indexes\n\nON indexes.object_id = dm_db_column_store_row_group_operational_stats.object_id\n\nAND indexes.index_id = dm_db_column_store_row_group_operational_stats.index_id\n\nWHERE objects.name = 'Sale_CCI';",
    "117": "SELECT\n\n\tdatabases.name,\n\n\tobjects.name,\n\n\tindexes.name,\n\n\tdm_column_store_object_pool.row_group_id,\n\n\tSUM(dm_column_store_object_pool.access_count) AS access_count,\n\n\tSUM(dm_column_store_object_pool.memory_used_in_bytes) AS memory_used_in_bytes\n\nFROM sys.dm_column_store_object_pool\n\nINNER JOIN sys.objects\n\nON objects.object_id = dm_column_store_object_pool.object_id\n\nINNER JOIN sys.indexes\n\nON indexes.object_id = dm_column_store_object_pool.object_id\n\nAND indexes.index_id = dm_column_store_object_pool.index_id\n\nINNER JOIN sys.databases\n\nON databases.database_id = dm_column_store_object_pool.database_id\n\nLEFT JOIN sys.columns\n\nON columns.column_id = dm_column_store_object_pool.column_id\n\nAND columns.object_id = dm_column_store_object_pool.object_id\n\nWHERE objects.name = 'Sale_CCI'\n\nAND databases.name = DB_NAME()\n\nGROUP BY databases.name, objects.name, indexes.name, dm_column_store_object_pool.row_group_id\n\nORDER BY dm_column_store_object_pool.row_group_id;",
    "118": "SELECT * FROM sys.internal_partitions\n\n\n\n\n\n SELECT\n\n\ttables.name AS table_name,\n\n\tindexes.name AS index_name,\n\n\tpartitions.partition_number,\n\n\tcolumn_store_row_groups.row_group_id,\n\n\tcolumn_store_row_groups.state_description,\n\n\tcolumn_store_row_groups.total_rows,\n\n\tcolumn_store_row_groups.size_in_bytes,\n\n\tcolumn_store_row_groups.deleted_rows,\n\n\tinternal_partitions.internal_object_type_desc,\n\n\tinternal_partitions.rows,\n\n\tinternal_partitions.data_compression_desc\n\nFROM sys.column_store_row_groups\n\nINNER JOIN sys.indexes\n\nON indexes.index_id = column_store_row_groups.index_id\n\nAND indexes.object_id = column_store_row_groups.object_id\n\nINNER JOIN sys.tables\n\nON tables.object_id = indexes.object_id\n\nINNER JOIN sys.partitions\n\nON partitions.partition_number = column_store_row_groups.partition_number\n\nAND partitions.index_id = indexes.index_id\n\nAND partitions.object_id = tables.object_id\n\nLEFT JOIN sys.internal_partitions\n\nON internal_partitions.object_id = tables.object_id\n\nWHERE tables.name = 'Sale_CCI'\n\nORDER BY indexes.index_id, column_store_row_groups.row_group_id;",
    "119": "INSERT INTO Fact.Sale_CCI_PARTITIONED\n\n\t([Sale Key], [City Key], [Customer Key], [Bill To Customer Key], [Stock Item Key], [Invoice Date Key], [Delivery Date Key],\n\n\t [Salesperson Key], [WWI Invoice ID], Description, Package, Quantity, [Unit Price], [Tax Rate],\n\n\t [Total Excluding Tax], [Tax Amount], Profit, [Total Including Tax], [Total Dry Items],\n\n\t [Total Chiller Items], [Lineage Key])\n\nSELECT\n\n\tSale.[Sale Key], Sale.[City Key], Sale.[Customer Key], Sale.[Bill To Customer Key], Sale.[Stock Item Key], Sale.[Invoice Date Key], Sale.[Delivery Date Key],\n\n\tSale.[Salesperson Key], Sale.[WWI Invoice ID], Sale.Description, Sale.Package, Sale.Quantity, Sale.[Unit Price], Sale.[Tax Rate],\n\n\tSale.[Total Excluding Tax], Sale.[Tax Amount], Sale.Profit, Sale.[Total Including Tax], Sale.[Total Dry Items],\n\n\tSale.[Total Chiller Items], Sale.[Lineage Key]\n\nFROM fact.Sale\n\nCROSS JOIN\n\nDimension.City\n\nWHERE City.[City Key] >= 1 AND City.[City Key] <= 110;",
    "120": "SELECT\n\n\tSUM([Quantity])\n\nFROM Fact.Sale_CCI_PARTITIONED\n\nWHERE [Invoice Date Key] >= '1/1/2016'\n\nAND [Invoice Date Key] < '2/1/2016';",
    "121": "INSERT INTO Fact.Sale_CCI_PARTITIONED\n\n\t([Sale Key], [City Key], [Customer Key], [Bill To Customer Key], [Stock Item Key], [Invoice Date Key], [Delivery Date Key], [Salesperson Key],\n\n     [WWI Invoice ID], Description, Package, Quantity, [Unit Price], [Tax Rate], [Total Excluding Tax], [Tax Amount], Profit, [Total Including Tax],\n\n     [Total Dry Items], [Total Chiller Items], [Lineage Key])\n\nSELECT\n\n\t[Sale Key], [City Key], [Customer Key], [Bill To Customer Key], [Stock Item Key], [Invoice Date Key], [Delivery Date Key], [Salesperson Key],\n\n     [WWI Invoice ID], Description, Package, Quantity, [Unit Price], [Tax Rate], [Total Excluding Tax], [Tax Amount], Profit, [Total Including Tax],\n\n     [Total Dry Items], [Total Chiller Items], [Lineage Key]\n\nFROM Fact.Sale_CCI_STAGING;",
    "122": "SELECT pg_catalog.set_config('search_path', '', false);",
    "123": "Owner: -\n--\n\nCREATE FUNCTION gtfs.dist_insert() RETURNS trigger\n    LANGUAGE plpgsql\n    SET search_path TO 'gtfs', 'public'\n    AS $$\n  BEGIN\n  NEW.shape_dist_traveled := (\n    SELECT\n      ST_LineLocatePoint(route.the_geom, stop.the_geom) * route.length\n    FROM stops as stop\n      LEFT JOIN trips ON (stop.feed_index=trips.feed_index AND trip_id=NEW.trip_id)\n      LEFT JOIN shape_geoms AS route ON (route.feed_index = stop.feed_index and trips.shape_id = route.shape_id)\n      WHERE stop_id = NEW.stop_id\n        AND stop.feed_index = COALESCE(NEW.feed_index::integer, (\n          SELECT column_default::integer\n          FROM information_schema.columns\n          WHERE (table_schema, table_name, column_name) = (TG_TABLE_SCHEMA, 'stop_times', 'feed_index')\n        ))\n  )::NUMERIC;",
    "124": "Owner: -\n--\n\nCREATE FUNCTION gtfs.dist_update() RETURNS trigger\n    LANGUAGE plpgsql\n    SET search_path TO 'gtfs', 'public'\n    AS $$\n  BEGIN\n  WITH f AS (SELECT MAX(feed_index) AS feed_index FROM feed_info)\n  UPDATE stop_times s\n    SET shape_dist_traveled = safe_locate(r.the_geom, p.the_geom, lag::numeric, coalesce(lead, length)::numeric, length::numeric)\n  FROM\n    (\n      SELECT\n        feed_index,\n        trip_id,\n        stop_id,\n        coalesce(lag(shape_dist_traveled) over (trip), 0) AS lag,\n        shape_dist_traveled AS dist,\n        lead(shape_dist_traveled) over (trip) AS lead\n      FROM stop_times\n        INNER JOIN f USING (feed_index)\n      WINDOW trip AS (PARTITION BY feed_index, trip_id ORDER BY stop_sequence)\n    ) AS d\n    LEFT JOIN stops AS p USING (feed_index, stop_id)\n    LEFT JOIN trips USING (feed_index, trip_id)\n    LEFT JOIN shape_geoms r USING (feed_index, shape_id)\n  WHERE (s.feed_index, s.trip_id, s.stop_id) = (d.feed_index, d.trip_id, d.stop_id)\n    AND COALESCE(lead, length) > lag\n    AND (dist > COALESCE(lead, length) OR dist < lag);",
    "125": "Owner: -\n--\n\nCREATE FUNCTION gtfs.routes_longest_trips(r gtfs.routes) RETURNS SETOF gtfs.trips\n    LANGUAGE sql STABLE\n    AS $$\n\nwith longest_trips as (select distinct on (t.direction_id) t.feed_index, t.trip_id from gtfs.trips t\ninner join gtfs.stop_times st on t.trip_id = st.trip_id\nwhere t.route_id = r.route_id and t.feed_index = r.feed_index\ngroup by t.feed_index, t.trip_id \norder by t.direction_id, count(st.*) desc)\n\nselect * from gtfs.trips where trip_id in (select trip_id from longest_trips) and feed_index = r.feed_index\n\n$$;",
    "126": "Owner: -\n--\n\nCREATE FUNCTION gtfs.routes_shape_geoms(r gtfs.routes) RETURNS SETOF gtfs.shape_geoms\n    LANGUAGE sql STABLE\n    AS $$\n\nwith distinct_shape_geoms as (\n\tselect distinct shape_id\n\tfrom gtfs.trips t\n\twhere t.route_id = r.route_id\n\tand t.feed_index = r.feed_index\n\t)\n\nselect * from gtfs.shape_geoms sg\nwhere sg.shape_id in (select * from distinct_shape_geoms)\nand sg.feed_index = r.feed_index\n\n$$;",
    "127": "Owner: -\n--\n\nCREATE FUNCTION gtfs.routes_stops(r gtfs.routes) RETURNS SETOF gtfs.stops\n    LANGUAGE sql STABLE\n    AS $$\nwith stop_ids as (\nselect distinct st.stop_id from gtfs.stop_times st\ninner join gtfs.trips tr on tr.trip_id = st.trip_id\ninner join gtfs.routes rt on rt.route_id = tr.route_id\nwhere rt.route_short_name = r.route_short_name\nand rt.feed_index = r.feed_index\nand tr.feed_index = r.feed_index\nand st.feed_index = r.feed_index\n)\nselect * from gtfs.stops where stop_id in (select stop_id from stop_ids) and stop_name not like '%Deboarding%' \nand feed_index = r.feed_index\n$$;",
    "128": "Owner: -\n--\n\nCREATE FUNCTION gtfs.routes_timepoints(r gtfs.routes) RETURNS SETOF gtfs.stops\n    LANGUAGE sql STABLE\n    AS $$\nwith stop_ids as (\nselect distinct st.stop_id from gtfs.stop_times st\ninner join gtfs.trips tr on tr.trip_id = st.trip_id\ninner join gtfs.routes rt on rt.route_id = tr.route_id\nwhere rt.route_short_name = r.route_short_name\nand rt.feed_index = r.feed_index\nand tr.feed_index = r.feed_index\nand st.feed_index = r.feed_index\nand st.timepoint = 1\n)\nselect * from gtfs.stops where stop_id in (select stop_id from stop_ids) and stop_name not like '%Deboarding%' and feed_index = r.feed_index\n$$;",
    "129": "Owner: -\n--\n\nCREATE FUNCTION gtfs.safe_locate(route public.geometry, point public.geometry, start numeric, finish numeric, length numeric) RETURNS numeric\n    LANGUAGE sql\n    AS $$\n    -- Multiply the fractional distance also the substring by the substring,\n    -- then add the start distance\n    SELECT LEAST(length, GREATEST(0, start) + ST_LineLocatePoint(\n      ST_LineSubstring(route, GREATEST(0, start / length), LEAST(1, finish / length)),\n      point\n    )::numeric * (\n      -- The absolute distance between start and finish\n      LEAST(length, finish) - GREATEST(0, start)\n    ));",
    "130": "Owner: -\n--\n\nCREATE FUNCTION gtfs.shape_update() RETURNS trigger\n    LANGUAGE plpgsql\n    SET search_path TO 'gtfs', 'public'\n    AS $$\n  BEGIN\n    INSERT INTO shape_geoms\n      (feed_index, shape_id, length, the_geom)\n    SELECT\n      feed_index,\n      shape_id,\n      ST_Length(ST_MakeLine(array_agg(geom ORDER BY shape_pt_sequence))::geography) as length,\n      ST_SetSRID(ST_MakeLine(array_agg(geom ORDER BY shape_pt_sequence)), 4326) AS the_geom\n    FROM (\n      SELECT\n        feed_index,\n        shape_id,\n        shape_pt_sequence,\n        ST_MakePoint(shape_pt_lon, shape_pt_lat) AS geom\n      FROM shapes s\n        LEFT JOIN shape_geoms sg USING (feed_index, shape_id)\n      WHERE the_geom IS NULL\n    ) a GROUP BY feed_index, shape_id;",
    "131": "Owner: -\n--\n\nCREATE FUNCTION gtfs.stops_nearby_stops(stp gtfs.stops) RETURNS SETOF gtfs.stops\n    LANGUAGE sql STABLE\n    AS $$ \nselect distinct(s.*) from gtfs.stops s \nwhere s.feed_index = stp.feed_index\nand st_distance(st_transform(s.the_geom, 2898), st_transform(stp.the_geom, 2898)) < 1000\nand s.stop_id != stp.stop_id\n$$;",
    "132": "Owner: -\n--\n\nCREATE FUNCTION gtfs.stops_routes(s gtfs.stops) RETURNS SETOF gtfs.routes\n    LANGUAGE sql STABLE\n    AS $$\n\n\tselect distinct (r.*) FROM\n\tgtfs.routes r\n\tinner join gtfs.trips t on (t.route_id = r.route_id and t.feed_index = r.feed_index)\n\tinner join gtfs.stop_times st on (st.trip_id = t.trip_id and st.feed_index = t.feed_index)\n\twhere st.stop_id = s.stop_id\n\t\t\t\tand r.feed_index = s.feed_index\n\torder by r.route_sort_order\n\n$$;",
    "133": "Owner: -\n--\n\nCREATE MATERIALIZED VIEW gtfs.stops_ago AS\n SELECT stops.stop_name,\n    stops.stop_lon,\n    stops.stop_lat\n   FROM gtfs.stops\n  WITH NO DATA;",
    "134": "SELECT @sql_command = 'SELECT TOP 10 * FROM Person.Person';",
    "135": "SELECT @table_name = 'Person.Person';",
    "136": "SELECT @sql_command = 'SELECT TOP 10 * FROM ' + @table_name;",
    "137": "INSERT INTO @database_list\n\t(database_name)\nSELECT\n\tname\nFROM sys.databases\nWHERE name LIKE 'AdventureWorks%';",
    "138": "SET @sql_command = 'SELECT 1';",
    "139": "SELECT @CMD = 'SELLECT TOP 17 * FROM Person.Person';",
    "140": "INSERT INTO @database_list\n\t(database_name)\nSELECT\n\tname\nFROM sys.databases\nWHERE name LIKE 'AdventureWorks%';",
    "141": "INSERT INTO @database_list\n\t(database_name)\nSELECT\n\tname\nFROM sys.databases\nWHERE name LIKE 'AdventureWorks%';",
    "142": "-- First name as entered in search box\nSET @CMD = 'SELECT PERSON.FirstName,PERSON.LastName,PHONE.PhoneNumber,PTYPE.Name FROM Person.Person PERSON INNER JOIN Person.PersonPhone PHONE ON PERSON.BusinessEntityID = PHONE.BusinessEntityID INNER JOIN Person.PhoneNumberType PTYPE ON PHONE.PhoneNumberTypeID = PTYPE.PhoneNumberTypeID WHERE PERSON.FirstName = ''' + @first_name + '''';",
    "143": "SET @sql_command = 'SELECT COUNT(*) ' + 'FROM ' +  @schema + '.' + @table;",
    "144": "SET @sql_command = 'SELECT COUNT(*) ' + 'FROM ' +  ISNULL(@schema, 'Person') + '.' + @table;",
    "145": "SET @sql_command = CONCAT ('SELECT COUNT(*) ', 'FROM ', @schema, '.', @table);",
    "146": "SELECT @string;",
    "147": "SELECT LTRIM(@string);",
    "148": "SELECT RTRIM(@string);",
    "149": "SELECT CHARINDEX('dinosaur', @string);",
    "150": "SELECT STUFF(@string, 5, 0, 'purple ');",
    "151": "SELECT STUFF(@string, 5, 11, 't-rex');",
    "152": "SELECT REPLACE(@string, ' ', '');",
    "153": "SELECT REPLACE(REPLACE(@string, ' ', ''), ':', '');",
    "154": "SELECT REPLACE(REPLACE(REPLACE(REPLACE(@string, ' ', ''), ':', ''), 'AM', ''), 'PM', '');",
    "155": "SELECT SUBSTRING(@string, 1, 3);",
    "156": "SELECT REPLICATE(0, 20 - LEN(@serial_number)) + @serial_number;",
    "157": "SELECT REVERSE(@string);",
    "158": "SELECT @sql_command = '\nSELECT\n\t*\nFROM Person.Person\nWHERE FirstName LIKE ''' + @first_name + '%''';",
    "159": "INSERT INTO @database_list\n\t\t(database_name)\n\tSELECT\n\t\tname\n\tFROM sys.databases\n\tWHERE databases.name NOT IN ('msdb', 'master', 'TempDB', 'model');",
    "160": "'\n\tFROM @database_list\n\tWHERE database_name IN (SELECT name FROM sys.databases);",
    "161": "SELECT @sql_command = '';",
    "162": "SELECT * FROM #index_maintenance\n\tORDER BY avg_fragmentation_in_percent DESC;",
    "163": "INSERT INTO @database_list\n\t\t(database_name, recovery_model_desc)\n\tSELECT\n\t\tname,\n\t\trecovery_model_desc\n\tFROM sys.databases\n\tWHERE databases.name NOT IN ('msdb', 'master', 'TempDB', 'model');",
    "164": "INSERT INTO @database_list\n\t\t(database_name)\n\tSELECT\n\t\tname\n\tFROM sys.databases\n\tWHERE databases.name NOT IN ('msdb', 'master', 'TempDB', 'model');",
    "165": "'\n\tFROM @database_list\n\tWHERE database_name IN (SELECT name FROM sys.databases WHERE databases.name NOT IN ('msdb', 'master', 'TempDB', 'model'));",
    "166": "SELECT @sql_command = '';",
    "167": "SELECT * FROM dbo.sql_command;",
    "168": "INSERT INTO @database_list\n\t\t(database_name, recovery_model_desc)\n\tSELECT\n\t\tname,\n\t\trecovery_model_desc\n\tFROM sys.databases\n\tWHERE databases.name NOT IN ('msdb', 'master', 'TempDB', 'model');",
    "169": "SELECT @bcp_command = 'type \"' + @sql_data_location + 'TempOutput.sql\" >> \"' + @sql_data_location + 'QueryOutput.sql\"';",
    "170": "SELECT @sql_command = @sql_command +\n\t\t'BACKUP DATABASE [' + database_name + '] TO DISK = ''''' + @backup_location + database_name + '_' + @datetime_string + '.dif'''' WITH DIFFERENTIAL;",
    "171": "SELECT @bcp_command = 'type \"' + @sql_data_location + 'TempOutput.sql\" >> \"' + @sql_data_location + 'QueryOutput.sql\"';",
    "172": "SELECT @sql_command = @sql_command +\n\t\t'BACKUP LOG [' + database_name + '] TO DISK = ''''' + @backup_location + database_name + '_' + @datetime_string + '.trn'''''\n\t\tFROM @database_list\n\t\tWHERE recovery_model_desc = 'FULL';",
    "173": "SELECT @bcp_command = 'type \"' + @sql_data_location + 'TempOutput.sql\" >> \"' + @sql_data_location + '\\QueryOutput.sql\"';",
    "174": "SELECT\n\t\tname AS server_name\n\tINTO #servers\n\tFROM sys.servers;",
    "175": "SELECT @sql_command = @sql_command + '\n\tINSERT INTO AdventureWorks2014.dbo.recent_product_counts\n\t\t(product_count, server_name)\n\tSELECT\n\t\tproduct_count,\n\t\t''' + server_name + '''\n\tFROM OPENQUERY([' + server_name + '], ''SELECT COUNT(*) AS product_count FROM AdventureWorks2014.Production.Product WHERE ModifiedDate >= ''''2/8/2014'''''');",
    "176": "SELECT @sql_command = @sql_command + '\n\tINSERT INTO AdventureWorks2014.dbo.recent_product_counts\n\t\t(product_count, server_name)\n\tSELECT\n\t\tCOUNT(*),\n\t\t@@SERVERNAME\n\tFROM AdventureWorks2014.Production.Product WHERE ModifiedDate >= ''2/8/2014''';",
    "177": "SELECT * FROM dbo.recent_product_counts;",
    "178": "40m%]%M:%> %n@%/%[%033[0m%]% # '\n\\set PAGER OFF\n--\\set HISTFILE ~/.psql_history- :HOST - : DBNAME -- Remove space between : and DBNAME\n\\set HISTSIZE 2000\n--\\set ECHO_HIDDEN ON\n\\set COMP_KEYWORD_CASE upper\n\n\\timing\n\\encoding unicode\n\n\\pset null 'NULL'\n\\pset border 2\n\n\\set QUIET OFF\n\n\\echo '\\nCurrent Host Server Date Time : '`date` '\\n'\n\n\\echo 'Administrative queries:\\n'\n\\echo '\\t\\t\\t:settings\\t-- Server Settings'\n\\echo '\\t\\t\\t:conninfo\\t-- Server connections'\n\\echo '\\t\\t\\t:activity\\t-- Server activity'\n\\echo '\\t\\t\\t:locks\\t\\t-- Lock info'\n\\echo '\\t\\t\\t:waits\\t\\t-- Waiting queires'\n\\echo '\\t\\t\\t:dbsize\\t\\t-- Database Size'\n\\echo '\\t\\t\\t:tablesize\\t-- Tables Size'\n\\echo '\\t\\t\\t:uselesscol\\t-- Useless columns'\n\\echo '\\t\\t\\t:uptime\\t\\t-- Server uptime'\n\\echo '\\t\\t\\t:menu\\t\\t-- Help Menu'\n\\echo '\\t\\t\\t\\\\h\\t\\t-- Help with SQL commands'\n\\echo '\\t\\t\\t\\\\?\\t\\t-- Help with psql commands\\n'\n\n\\echo 'Development queries:\\n'\n\\echo '\\t\\t\\t:sp\\t\\t-- Current Search Path'\n\\echo '\\t\\t\\t:clear\\t\\t-- Clear screen'\n\\echo '\\t\\t\\t:ll\\t\\t-- List\\n'\n\n-- Administration queries\n\n\\set menu '\\\\i ~/.psqlrc'\n\n\\set settings 'select name, setting,unit,context from pg_settings;",
    "179": "'\n\n\\set locks  'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;",
    "180": "'\n\n\\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;",
    "181": "'\n\n\\set activity 'select datname, pid, usename, application_name,client_addr, client_hostname, client_port, query, state from pg_stat_activity;",
    "182": "'\n\n\\set waits 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting, now() - pg_stat_activity.query_start AS \\\"totaltime\\\", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \\'%IDLE%\\'::text AND pg_stat_activity.waiting = true;",
    "183": "'\n\n\\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;",
    "184": "'\n\n\\set tablesize 'SELECT nspname || \\'.\\' || relname AS \\\"relation\\\", pg_size_pretty(pg_relation_size(C.oid)) AS \"size\" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\\'pg_catalog\\', \\'information_schema\\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;",
    "185": "'\n\n\\set uptime 'select now() - pg_postmaster_start_time() AS uptime;",
    "186": "#!/bin/bash\n\n# Connect to the salon database\nDATABASE_NAME=\"salon\"\n\n# Function to display services\ndisplay_services() {\n  echo \"Welcome to My Salon, how can I help you?\"\n  echo \"\"\n  psql -d $DATABASE_NAME -t -c \"SELECT service_id, name FROM services ORDER BY service_id;",
    "187": "do\n\tdisplay_services\n\tread -p \"\" SERVICE_ID_SELECTED\n\tSERVICE_NAME=$(psql -d $DATABASE_NAME -t -c \"SELECT name FROM services WHERE service_id = $SERVICE_ID_SELECTED;",
    "188": "\"\n  fi\n  read -p \"What time would you like your $SERVICE_NAME, $CUSTOMER_NAME? \" SERVICE_TIME\n  psql -d $DATABASE_NAME -c \"INSERT INTO appointments (customer_id, service_id, time) VALUES ((SELECT customer_id FROM customers WHERE phone = '$CUSTOMER_PHONE'), $SERVICE_ID_SELECTED, '$SERVICE_TIME');",
    "189": "CREATE FUNCTION application_name() RETURNS text AS $$\n  SELECT application_name FROM pg_stat_activity WHERE pid = pg_backend_pid()\n$$ LANGUAGE sql;",
    "190": "CREATE FUNCTION cxn() RETURNS text AS $$\n  SELECT COALESCE(host(inet_client_addr())||':'||inet_client_port(), '(unix)')\n$$ LANGUAGE sql;",
    "191": "RETURN (SELECT events FROM audit.audited WHERE audit.audited.audited = tab);",
    "192": "CREATE VIEW audited AS\nSELECT tgrelid::regclass AS audited,\n       trim('\\x00' from encode(tgargs, 'escape'))::regclass AS events\n  FROM pg_trigger WHERE tgfoid = 'audit.save'::regproc;",
    "193": "--Select to confirm\nUSE AdventureWorks2012;",
    "194": "select * from mm_member;",
    "195": "-- Q6\nselect m.movie_title, r.rental_id, mm.last\n   from mm_movie m\n   join mm_rental r on m.movie_id = r.movie_id\n   join mm_member mm on r.member_id = mm.member_id\n   order by r.rental_id;",
    "196": "-- Q7\nselect m.movie_title, r.rental_id, mm.last\n   from mm_movie m, mm_rental r, mm_member mm\n   where m.movie_id = r.movie_id and r.member_id = mm.member_id\n   order by r.rental_id;",
    "197": "-- Q10\nselect sequence_name, last_number, increment_by\n   from user_sequences\n   where sequence_name = 'SEQ_MOVIE_ID';",
    "198": "-- Q11\nselect seq_movie_id.nextval from dual;",
    "199": "-- Q14\ncreate view vw_movie_rental as\n   select m.movie_title, r.rental_id, mem.last\n      from mm_movie m\n      join mm_rental r on m.movie_id = r.movie_id\n      join mm_member mem on r.member_id = mem.member_id\n      order by r.rental_id;",
    "200": "select * from vw_movie_rental;",
    "201": "-- Q15\nupdate mm_member\n   set last = 'Tangier 1'\n   where member_id in (\n      select member_id\n         from mm_rental\n         where movie_id = 2\n   );",
    "202": "select * from vw_movie_rental;",
    "203": "SELECT pg_catalog.set_config('search_path', '', false);",
    "204": "Owner: pmfarr\n--\n\nCREATE VIEW public.users_votes AS\n SELECT votes.username,\n    questions.survey_id,\n    choices.question_id,\n    votes.choice_id,\n    votes.score\n   FROM ((public.votes\n     JOIN public.choices ON ((votes.choice_id = choices.id)))\n     JOIN public.questions ON ((questions.id = choices.question_id)));",
    "205": "select * from dba_objects;",
    "206": "select * from dba_tab_columns;",
    "207": "select * from dba_objects;",
    "208": "--1.Who is the owner of the view DBA_TABLES? Who is the owner of table DUAL? (owner)\nselect distinct owner from dba_objects where object_name = 'DBA_TABLES' and object_type = 'VIEW';",
    "209": "select distinct owner from dba_objects where object_name = 'DUAL' and object_type = 'TABLE';",
    "210": "--2.Who is the owner of synonym DBA_TABLES? (or synonym DUAL) (owner)\nselect distinct owner from dba_objects where object_name = 'DBA_TABLES' and object_type = 'SYNONYM';",
    "211": "select distinct owner from dba_objects where object_name = 'DUAL' and object_type = 'SYNONYM';",
    "212": "--3.What kind of objects the database user ORAUSER has? (dba_objects.object_type column)\nselect distinct object_type from dba_objects where owner = 'ORAUSER';",
    "213": "--4.What are the object types existing in the database? (object_type) \nselect distinct object_type from dba_objects order by object_type;",
    "214": "--5.Which users have more than 10 different kind of objects in the database? (owner)\nselect owner from dba_objects group by owner having count(distinct object_type) > 10;",
    "215": "--6.Which users have both triggers and views in the database? (owner)\nselect owner from dba_objects where object_type = 'TRIGGER'\nINTERSECT\nselect owner from dba_objects where object_type = 'VIEW';",
    "216": "--7.Which users have views but don't have triggers? (owner)\nselect owner from dba_objects where object_type = 'VIEW'\nMINUS\nselect owner from dba_objects where object_type = 'TRIGGER';",
    "217": "--8.Which users have more than 40 tables, but less than 30 indexes? (owner)\nselect owner from dba_objects where object_type = 'TABLE' group by owner having count(*) > 40\nINTERSECT\nselect owner from dba_objects where object_type = 'INDEX' group by owner having count(*) < 30;",
    "218": "--9.Let's see the difference between a table and a view (dba_objects.data_object_id).\nselect * from dba_objects where object_type = 'TABLE' fetch next 5 rows only;",
    "219": "select * from dba_objects where object_type = 'VIEW' fetch next 5 rows only;",
    "220": "--null\n\n--10.Which object types have NULL (or 0) in the column data_object_id? (object_type)\nselect distinct object_type from dba_objects where data_object_id is null;",
    "221": "--11.Which object types have non NULL (and non 0) in the column data_object_id? (object_type)\nselect distinct object_type from dba_objects where data_object_id is not null;",
    "222": "--12.What is the intersection of the previous 2 queries? (object_type)\nselect distinct object_type from dba_objects where data_object_id is null\nINTERSECT\nselect distinct object_type from dba_objects where data_object_id is not null;",
    "223": "-----------------------------------------------\nselect * from dba_tab_columns;",
    "224": "--13.How many columns nikovits.emp table has? (num)\nselect count(*) as num from dba_tab_columns where owner = 'NIKOVITS' and table_name = 'EMP';",
    "225": "--14.What is the data type of the 6th column of the table nikovits.emp? (data_type)\nselect data_type from dba_tab_columns where owner = 'NIKOVITS' and table_name = 'EMP' and column_id = 6;",
    "226": "--15.Give the owner and name of the tables which have column name beginning with letter 'Z'.(owner, table_name)\nselect owner, table_name from dba_tab_columns where owner like 'Z%';",
    "227": "--16.Give the owner and name of the tables which have at least 8 columns with data type DATE.(owner, table_name)\nselect owner, table_name from dba_tab_columns where data_type = 'DATE' group by owner, table_name having count(*) > 8;",
    "228": "--17.Give the owner and name of the tables whose 1st and 4th column's datatype is VARCHAR2.(owner, table_name)\nselect owner, table_name from dba_tab_columns where data_type = 'VARCHAR2' and column_id in (1, 4);",
    "229": "/*18.Write a PL/SQL procedure, which prints out the owners and names of the tables beginning with the \nparameter character string. */\nCREATE OR REPLACE PROCEDURE table_print(p_char VARCHAR2) IS\n   cursor mycursor Is\n     select owner, table_name from dba_tables where owner like p_char || '%';",
    "230": "/\nSELECT * FROM test1 ORDER BY col2;",
    "231": "select * from PR01;",
    "232": "--Give the following query (in ARAMIS database):\nSELECT * FROM sz1;",
    "233": "--Is there a table named 'sz1' ? (Answer -> no)\nselect * from dba_tables where table_name = 'SZ1';",
    "234": "--Then which is the table (owner, table_name) whose records are displayed?\nselect * from dba_objects where object_name = 'SZ1';",
    "235": "--synonym\n--You should find a table, a view is not enough.*/\nselect * from dba_synonyms where synonym_name = 'SZ1';",
    "236": "select * from emp;",
    "237": "SELECT * FROM nikovits.emp@aramisdb;",
    "238": "select * from NIKOVITS.countries_v@aramisdb;",
    "239": "select * from NIKOVITS.rivers_v;",
    "240": "--Give the names of countries through which the Mekong river flows.\nselect rname, cname, countries from NIKOVITS.countries_v@aramisdb join NIKOVITS.rivers_v\non countries like '%' || tld || '%'\nwhere rname = 'Mekong';",
    "241": "-- 1.Give the names and sizes of the database data files (*.dbf). (file_name, size_in_bytes)\nselect file_name, bytes from dba_data_files;",
    "242": "-- 2. Give the names of the tablespaces in the database. (tablespace_name)\nselect tablespace_name from dba_tablespaces;",
    "243": "select file_name, tablespace_name from dba_data_files;",
    "244": "select df.file_name, ts.tablespace_name\nfrom dba_tablespaces ts join dba_data_files df\non df.tablespace_name = ts.tablespace_name;",
    "245": "-- 4. Is there a tablespace that doesn't have any datafile in dba_data_files? -> see dba_temp_files\nselect tablespace_name from dba_tablespaces where tablespace_name not in (select tablespace_name from dba_data_files);",
    "246": "select tablespace_name from dba_tablespaces\nminus\nselect tablespace_name from dba_data_files;",
    "247": "-- 5. What is the datablock size in USERS tablespace? (block_size)\nselect block_size from dba_tablespaces where tablespace_name = 'USERS';",
    "248": "-- 6. Find some segments whose owner is NIKOVITS. What segment types do they have? List the types. (segment_type)\nselect DISTINCT segment_type from dba_segments where owner = 'NIKOVITS';",
    "249": "--7. How many extents are there in file 'users02.dbf' ? (num_extents)\nselect count(*) as num_extents from dba_extents ex, dba_data_files df\nwhere ex.file_id = df.file_id and df.file_name like '%users02.dbf';",
    "250": "--How many bytes do they occupy? (sum_bytes)\nselect sum(ex.bytes) as sum_bytes from dba_extents ex, dba_data_files df\nwhere ex.file_id = df.file_id and df.file_name like '%users02.dbf';",
    "251": "select count(extent_id), sum(dba_extents.bytes)\nfrom dba_data_files join dba_extents\non dba_data_files.file_id = dba_extents.file_id\nwhere file_name like '%users02.dbf';",
    "252": "select count(*) as num from dba_data_files df, dba_free_space fs\nwhere df.file_id = fs.file_id and df.file_name like '%users02.dbf';",
    "253": "--How many percentage of file 'users02.dbf' is full (allocated to some object)?\nselect round(sum(ex.bytes) / df.bytes, 2) * 100\nfrom dba_data_files df join dba_extents ex\non df.file_id = ex.file_id\nwhere file_name like '%users02.dbf'\ngroup by df.bytes;",
    "254": "select count(block_id), sum(dba_free_space.bytes)\nfrom dba_data_files join dba_free_space\non dba_data_files.file_id = dba_free_space.file_id\nwhere file_name like '%users02.dbf';",
    "255": "select dba_data_files.bytes, count(block_id), dba_data_files.bytes-sum(dba_free_space.bytes)\nfrom dba_data_files join dba_free_space\non dba_data_files.file_id = dba_free_space.file_id\nwhere file_name like '%users02.dbf'\ngroup by file_name,dba_data_files.bytes;",
    "256": "--9. Who is the owner whose objects occupy the most space in the database? (owner, sum_bytes)\nselect owner, sum(bytes) from dba_extents group by owner order by sum(bytes) desc fetch next 15 row only;",
    "257": "select * from(select owner, sum(bytes) from dba_segments group by owner order by sum(bytes) desc) where rownum = 1;",
    "258": "--10. Is there a table of owner NIKOVITS that has extents in at least two different datafiles? (table_name)\nselect segment_type, count(distinct(file_id)) from dba_extents where owner = 'NIKOVITS' and segment_type = 'TABLE' group by owner, segment_type having count(distinct(file_id)) > 1;",
    "259": "--11. On which tablespace is the table ORAUSER.dolgozo?\nselect tablespace_name from dba_segments where owner = 'ORAUSER' and segment_type = 'TABLE' and lower(segment_name) = 'dolgozo';",
    "260": "--On which tablespace is the table NIKOVITS.eladasok? Why NULL? \n --(-> partitioned table, stored on more than 1 tablespace)\nselect tablespace_name from dba_segments where owner = 'NIKOVITS' and segment_type = 'TABLE' and lower(segment_name) = 'eladasok';",
    "261": "select owner, segment_name, blocks\nfrom dba_segments\nwhere bytes = \n(select max(bytes) from dba_segments where segment_type = 'INDEX')\nand segment_type = 'INDEX';",
    "262": "select extent_id from dba_extents;",
    "263": "BEGIN\nselect object_name, timestamp into tname, tdate from dba_objects \nwhere object_type ='TABLE' and owner = p_user and\ntimestamp in (select max(timestamp) from dba_objects where object_type ='TABLE' and owner = p_user);",
    "264": "select bytes into tsize from dba_segments where owner = p_user and segment_name = tname;",
    "265": "BEGIN \n    SELECT COUNT(*) INTO MEMCOUNT\n    FROM MEMBERSHIP\n    WHERE MEM_NUM = MEM_NO;",
    "266": "SELECT * FROM MEMBERSHIP;",
    "267": "SELECT * FROM RENTAL;",
    "268": "BEGIN\n    SELECT COUNT(*) INTO CVID_NUM\n    FROM VIDEO\n    WHERE VID_NUM = VID_NUM;",
    "269": "SELECT * FROM VIDEO;",
    "270": "SELECT * FROM RENTAL;",
    "271": "select * from detailrental;",
    "272": "Owner: maxoutigrou62\n--\n\nSELECT pg_catalog.setval('amis_id_seq', 6, true);",
    "273": "Owner: maxoutigrou62\n--\n\nSELECT pg_catalog.setval('qg_id_seq', 89, true);",
    "274": "Owner: postgres\n--\n\nCREATE FUNCTION n_5() RETURNS integer\n    LANGUAGE sql IMMUTABLE STRICT\n    AS $$\nSELECT 5;",
    "275": "Owner: postgres\n--\n\nCREATE VIEW links_simple AS\n    SELECT l.domain AS link_domain, l.text AS link_address, links.authentication, links.connection FROM links, addresses l WHERE (l.id = links.address);",
    "276": "Owner: postgres\n--\n\nCREATE VIEW messages_simple AS\n    SELECT f.domain AS from_domain, f.text AS from_address, t.domain AS to_domain, t.text AS to_address, m.header, m.body, m.processed, m.msgid, m.receivedfrom FROM messages m, addresses f, addresses t WHERE ((t.id = m.destination) AND (f.id = m.source)) ORDER BY m.id;",
    "277": "-- transaction\n-- view\nCREATE VIEW \"export\" AS \nSELECT \n   T.id,\n   T.hash,\n   array_agg(\"TI\".\"address_id\") as inputs,\n   array_agg(\"TO\".\"address_id\") as outputs\nFROM\n \"Transaction\" T\n  LEFT JOIN \"TransactionInput\" \"TI\"\n    ON \"TI\".tx_id = T.id\n  LEFT JOIN \"TransactionOutput\" \"TO\"\n    ON \"TO\".tx_id = T.id\n\nGROUP BY T.id, T.hash\n\n-- inserts\nINSERT INTO address SELECT (id, 1, payload, NULL, ARRAY[], ARRAY[]) FROM carp_address;",
    "278": "INSERT INTO transaction SELECT\n    id, 1, hash, NULL, \"inputs\", \"outputs\" FROM carp_export\n\n-- \ncreate or replace function array_unique (a anycompatiblearray) returns anycompatiblearray as $$\n  select array (\n    select distinct v from unnest(a) as b(v) order by v\n  )\n$$ language sql;",
    "279": "CREATE OR REPLACE FUNCTION array_sort_unique (ANYARRAY) RETURNS ANYARRAY\nLANGUAGE SQL\nAS $body$\n  SELECT ARRAY(\n    SELECT DISTINCT $1[s.i]\n    FROM generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)\n    ORDER BY 1\n  );",
    "280": "CREATE VIEW all_user_first_name_and_phone_number(first_name, phone_number) AS\nSELECT first_name, phone_number\nFROM store_users;",
    "281": "SELECT * FROM all_user_first_name_and_phone_number;",
    "282": "-- hub_beer\n\nINSERT INTO hub_beer\n(\n  hash_key,\n  valid_from,\n  source,\n  id\n)\nSELECT DISTINCT\n        DV_HASH(i.id) AS hash_key,\n        $LOAD_DATE AS valid_from,\n        'beer_database' AS source,\n        i.id AS id\nFROM beer_database i\nWHERE DV_HASH(i.id) NOT IN (SELECT s.hash_key FROM hub_beer s);",
    "283": "-- hub_brewery\n\nINSERT INTO hub_brewery\n(\n  hash_key,\n  valid_from,\n  source,\n  id\n)\nSELECT DISTINCT\n        DV_HASH(i.brewery_id) AS hash_key,\n        $LOAD_DATE AS valid_from,\n        'beer_database' AS source,\n        i.brewery_id AS id\nFROM beer_database i\nWHERE DV_HASH(i.id) NOT IN (SELECT s.hash_key FROM hub_brewery s);",
    "284": "-- link_brewery_beer\n\nINSERT INTO link_brewery_beer\n(\n  hash_key,\n  valid_from,\n  source,\n  brewery_hash_key,\n  beer_hash_key\n)\nSELECT DISTINCT\n       DV_HASH(i.brewery_id,i.id) as hash_key,\n       $LOAD_DATE as valid_from,\n       'beer_database' as source,\n       DV_HASH(i.brewery_id) as brewery_hash_key,\n       DV_HASH(i.id) as beer_hash_key\nFROM beer_database i\nWHERE DV_HASH(i.brewery_id,i.id) NOT IN (SELECT u.hash_key FROM link_brewery_beer u);",
    "285": "-- sat_beer\n-- Insert all new records\nINSERT INTO sat_beer\n(\n  hash_key,\n  valid_from,\n  valid_to,\n  source,\n  name,\n  alcohol_by_volume,\n  international_bitterness_units,\n  description,\n  style,\n  category\n)\nSELECT DISTINCT\n    DV_HASH(i.id) AS hash_key,\n    $LOAD_DATE AS valid_from,\n    NULL AS valid_to,\n    'beer_database' AS source,\n    i.name AS name,\n    i.alcohol_by_volume AS alcohol_by_volume,\n    i.international_bitterness_units AS international_bitterness_units,\n    i.description AS description,\n    i.style AS style,\n    i.category AS category\nFROM beer_database i\nLEFT  JOIN sat_beer sat ON DV_HASH(i.id) = sat.hash_key AND sat.valid_to IS NULL\nWHERE\n    NOT EQUAL_NULL(i.name,sat.name)\n    \tOR\n    NOT EQUAL_NULL(i.alcohol_by_volume,sat.alcohol_by_volume)\n    \tOR\n    NOT EQUAL_NULL(i.international_bitterness_units,sat.international_bitterness_units)\n    \tOR\n    NOT EQUAL_NULL(i.description,sat.description)\n    \tOR\n    NOT EQUAL_NULL(i.style,sat.style)\n    \tOR\n    NOT EQUAL_NULL(i.category,sat.category);",
    "286": "--------------------------------------------------------------------\n--------------------------------------------------------------------\n--------------------------------------------------------------------\n\n\n-- sat_brewery\n-- Insert all new records\nINSERT INTO sat_brewery\n(\n  hash_key,\n  valid_from,\n  valid_to,\n  source,\n  brewer,\n  address,\n  city,\n  state,\n  country,\n  coordinates,\n  website\n)\nSELECT DISTINCT\n    DV_HASH(i.brewery_id) AS hash_key,\n    $LOAD_DATE AS valid_from,\n    NULL AS valid_to,\n    'beer_database' AS source,\n    i.brewer AS brewer,\n    i.address AS address,\n    i.city AS city,\n    i.state AS state,\n    i.country AS country,\n    i.coordinates AS coordinates,\n    i.website AS website\nFROM beer_database i\nLEFT  JOIN sat_brewery sat ON DV_HASH(i.id) = sat.hash_key AND sat.valid_to IS NULL\nWHERE\n    NOT EQUAL_NULL(i.brewer,sat.brewer)\n    \tOR\n    NOT EQUAL_NULL(i.address,sat.address)\n    \tOR\n    NOT EQUAL_NULL(i.city,sat.city)\n    \tOR\n    NOT EQUAL_NULL(i.state,sat.state)\n    \tOR\n    NOT EQUAL_NULL(i.country,sat.country)\n    \tOR\n    NOT EQUAL_NULL(i.coordinates,sat.coordinates)\n        OR\n    NOT EQUAL_NULL(i.website,sat.website);",
    "287": "--------------------------------------------------------------------\n--------------------------------------------------------------------\n--------------------------------------------------------------------\n\n\n\n-- satl_brewery_beer\n-- Insert all new records\nINSERT INTO satl_brewery_beer\n(\n  hash_key,\n  valid_from,\n  valid_to,\n  source\n)\nSELECT DISTINCT\n       DV_HASH(i.brewery_id,i.id) as hash_key,\n       $LOAD_DATE as valid_from,\n       NULL as valid_to,\n       'beer_database' as source\nFROM beer_database i\nWHERE DV_HASH(i.brewery_id,i.id) NOT IN (SELECT u.hash_key FROM satl_brewery_beer u WHERE u.valid_to IS NULL);",
    "288": "SELECT 'CREATE DATABASE dybi'\nWHERE NOT EXISTS(SELECT FROM pg_database WHERE datname = 'dybi');",
    "289": "SELECT * FROM animals;",
    "290": "SELECT * FROM animals;",
    "291": "SELECT * FROM animals;",
    "292": "SELECT * FROM animals;",
    "293": "SELECT * FROM animals;",
    "294": "SELECT * FROM animals;",
    "295": "SELECT * FROM animals;",
    "296": "SELECT * FROM animals;",
    "297": "SELECT * FROM animals;",
    "298": "UPDATE animals SET species_id = ( SELECT id FROM species WHERE name = 'Digimon') WHERE name LIKE '%mon';",
    "299": "UPDATE animals SET species_id = ( SELECT id FROM species WHERE name = 'Pokemon') WHERE name NOT LIKE '%mon';",
    "300": "UPDATE animals SET owner_id = (SELECT id FROM owners WHERE full_name = 'Sam Smith') WHERE name = 'Agumon';",
    "301": "UPDATE animals SET owner_id = (SELECT id FROM owners WHERE full_name = 'Jennifer Orwell') WHERE name IN ('Pikachu', 'Gabumon');",
    "302": "UPDATE animals SET owner_id = (SELECT id FROM owners WHERE full_name = 'Bob') WHERE name IN ('Devimon', 'Plantmon');",
    "303": "UPDATE animals SET owner_id = (SELECT id FROM owners WHERE full_name = 'Melody Pond') WHERE name IN ('Charmander', 'Squirtle', 'Blossom');",
    "304": "UPDATE animals SET owner_id = (SELECT id FROM owners WHERE full_name = 'Dean Winchester') WHERE name IN ('Angemon', 'Boarmon');",
    "305": "CREATE VIEW \"liquid_feedback_version\" AS\n  SELECT * FROM (VALUES ('2.2.1', 2, 2, 1))\n  AS \"subquery\"(\"string\", \"major\", \"minor\", \"revision\");",
    "306": "Can be used to select the latest snapshot data in the snapshot tables';",
    "307": "BEGIN\n      SELECT * INTO \"initiative_row\" FROM \"initiative\"\n        WHERE \"id\" = NEW.\"initiative_id\";",
    "308": "SELECT * INTO \"issue_row\" FROM \"issue\"\n        WHERE \"id\" = \"initiative_row\".\"issue_id\";",
    "309": "SELECT \"id\" INTO \"draft_id_v\" FROM \"current_draft\"\n          WHERE \"initiative_id\" = NEW.\"id\";",
    "310": "BEGIN\n      SELECT * INTO \"initiative_row\" FROM \"initiative\"\n        WHERE \"id\" = NEW.\"initiative_id\";",
    "311": "SELECT * INTO \"issue_row\" FROM \"issue\"\n        WHERE \"id\" = \"initiative_row\".\"issue_id\";",
    "312": "BEGIN\n      SELECT * INTO \"policy_row\" FROM \"policy\"\n        WHERE \"id\" = NEW.\"policy_id\";",
    "313": "CREATE VIEW \"area_delegation\" AS\n  SELECT DISTINCT ON (\"area\".\"id\", \"delegation\".\"truster_id\")\n    \"area\".\"id\" AS \"area_id\",\n    \"delegation\".\"id\",\n    \"delegation\".\"truster_id\",\n    \"delegation\".\"trustee_id\",\n    \"delegation\".\"scope\"\n  FROM \"area\"\n  JOIN \"delegation\"\n    ON \"delegation\".\"unit_id\" = \"area\".\"unit_id\"\n    OR \"delegation\".\"area_id\" = \"area\".\"id\"\n  JOIN \"member\"\n    ON \"delegation\".\"truster_id\" = \"member\".\"id\"\n  JOIN \"privilege\"\n    ON \"area\".\"unit_id\" = \"privilege\".\"unit_id\"\n    AND \"delegation\".\"truster_id\" = \"privilege\".\"member_id\"\n  WHERE \"member\".\"active\" AND \"privilege\".\"voting_right\"\n  ORDER BY\n    \"area\".\"id\",\n    \"delegation\".\"truster_id\",\n    \"delegation\".\"scope\" DESC;",
    "314": "CREATE VIEW \"issue_delegation\" AS\n  SELECT DISTINCT ON (\"issue\".\"id\", \"delegation\".\"truster_id\")\n    \"issue\".\"id\" AS \"issue_id\",\n    \"delegation\".\"id\",\n    \"delegation\".\"truster_id\",\n    \"delegation\".\"trustee_id\",\n    \"delegation\".\"scope\"\n  FROM \"issue\"\n  JOIN \"area\"\n    ON \"area\".\"id\" = \"issue\".\"area_id\"\n  JOIN \"delegation\"\n    ON \"delegation\".\"unit_id\" = \"area\".\"unit_id\"\n    OR \"delegation\".\"area_id\" = \"area\".\"id\"\n    OR \"delegation\".\"issue_id\" = \"issue\".\"id\"\n  JOIN \"member\"\n    ON \"delegation\".\"truster_id\" = \"member\".\"id\"\n  JOIN \"privilege\"\n    ON \"area\".\"unit_id\" = \"privilege\".\"unit_id\"\n    AND \"delegation\".\"truster_id\" = \"privilege\".\"member_id\"\n  WHERE \"member\".\"active\" AND \"privilege\".\"voting_right\"\n  ORDER BY\n    \"issue\".\"id\",\n    \"delegation\".\"truster_id\",\n    \"delegation\".\"scope\" DESC;",
    "315": "CREATE VIEW \"member_count_view\" AS\n  SELECT count(1) AS \"total_count\" FROM \"member\" WHERE \"active\";",
    "316": "CREATE VIEW \"unit_member_count\" AS\n  SELECT\n    \"unit\".\"id\" AS \"unit_id\",\n    count(\"member\".\"id\") AS \"member_count\"\n  FROM \"unit\"\n  LEFT JOIN \"privilege\"\n  ON \"privilege\".\"unit_id\" = \"unit\".\"id\" \n  AND \"privilege\".\"voting_right\"\n  LEFT JOIN \"member\"\n  ON \"member\".\"id\" = \"privilege\".\"member_id\"\n  AND \"member\".\"active\"\n  GROUP BY \"unit\".\"id\";",
    "317": "CREATE VIEW \"opening_draft\" AS\n  SELECT \"draft\".* FROM (\n    SELECT\n      \"initiative\".\"id\" AS \"initiative_id\",\n      min(\"draft\".\"id\") AS \"draft_id\"\n    FROM \"initiative\" JOIN \"draft\"\n    ON \"initiative\".\"id\" = \"draft\".\"initiative_id\"\n    GROUP BY \"initiative\".\"id\"\n  ) AS \"subquery\"\n  JOIN \"draft\" ON \"subquery\".\"draft_id\" = \"draft\".\"id\";",
    "318": "CREATE VIEW \"current_draft\" AS\n  SELECT \"draft\".* FROM (\n    SELECT\n      \"initiative\".\"id\" AS \"initiative_id\",\n      max(\"draft\".\"id\") AS \"draft_id\"\n    FROM \"initiative\" JOIN \"draft\"\n    ON \"initiative\".\"id\" = \"draft\".\"initiative_id\"\n    GROUP BY \"initiative\".\"id\"\n  ) AS \"subquery\"\n  JOIN \"draft\" ON \"subquery\".\"draft_id\" = \"draft\".\"id\";",
    "319": "CREATE VIEW \"critical_opinion\" AS\n  SELECT * FROM \"opinion\"\n  WHERE (\"degree\" = 2 AND \"fulfilled\" = FALSE)\n  OR (\"degree\" = -2 AND \"fulfilled\" = TRUE);",
    "320": "CREATE VIEW \"initiative_suggestion_order_calculation\" AS\n  SELECT\n    \"initiative\".\"id\" AS \"initiative_id\",\n    (\"issue\".\"closed\" NOTNULL OR \"issue\".\"fully_frozen\" NOTNULL) AS \"final\"\n  FROM \"initiative\" JOIN \"issue\"\n  ON \"initiative\".\"issue_id\" = \"issue\".\"id\"\n  WHERE (\"issue\".\"closed\" ISNULL AND \"issue\".\"fully_frozen\" ISNULL)\n  OR (\"initiative\".\"final_suggestion_order_calculated\" = FALSE);",
    "321": "CREATE VIEW \"battle_participant\" AS\n    SELECT \"initiative\".\"id\", \"initiative\".\"issue_id\"\n    FROM \"issue\" JOIN \"initiative\"\n    ON \"issue\".\"id\" = \"initiative\".\"issue_id\"\n    WHERE \"initiative\".\"admitted\"\n  UNION ALL\n    SELECT NULL, \"id\" AS \"issue_id\"\n    FROM \"issue\";",
    "322": "CREATE VIEW \"expired_session\" AS\n  SELECT * FROM \"session\" WHERE now() > \"expiry\";",
    "323": "CREATE VIEW \"open_issue\" AS\n  SELECT * FROM \"issue\" WHERE \"closed\" ISNULL;",
    "324": "CREATE VIEW \"member_contingent_left\" AS\n  SELECT\n    \"member_id\",\n    \"polling\",\n    max(\"text_entry_limit\" - \"text_entry_count\") AS \"text_entries_left\",\n    max(\"initiative_limit\" - \"initiative_count\") AS \"initiatives_left\"\n  FROM \"member_contingent\" GROUP BY \"member_id\", \"polling\";",
    "325": "SELECT INTO \"delegating_voter_row\" * FROM \"delegating_voter\"\n          WHERE \"issue_id\" = \"issue_id_p\"\n          AND \"member_id\" = \"output_row\".\"member_id\";",
    "326": "SELECT \"unit_id\" INTO \"unit_id_v\"\n          FROM \"area\" WHERE \"id\" = \"area_id_v\";",
    "327": "ELSIF\n        \"unit_id_p\" ISNULL AND\n        \"area_id_p\" ISNULL AND\n        \"issue_id_p\" NOTNULL\n      THEN\n        SELECT INTO \"issue_row\" * FROM \"issue\" WHERE \"id\" = \"issue_id_p\";",
    "328": "SELECT \"area_id\" INTO \"area_id_v\"\n          FROM \"issue\" WHERE \"id\" = \"issue_id_p\";",
    "329": "SELECT \"unit_id\" INTO \"unit_id_v\"\n          FROM \"area\"  WHERE \"id\" = \"area_id_v\";",
    "330": "\"output_row\".\"member_valid\" := EXISTS (\n          SELECT NULL FROM \"member\" JOIN \"privilege\"\n          ON \"privilege\".\"member_id\" = \"member\".\"id\"\n          AND \"privilege\".\"unit_id\" = \"unit_id_v\"\n          WHERE \"id\" = \"output_row\".\"member_id\"\n          AND \"member\".\"active\" AND \"privilege\".\"voting_right\"\n        );",
    "331": "ELSIF \"scope_v\" = 'area' THEN\n            \"output_row\".\"participation\" := EXISTS (\n              SELECT NULL FROM \"membership\"\n              WHERE \"area_id\" = \"area_id_p\"\n              AND \"member_id\" = \"output_row\".\"member_id\"\n            );",
    "332": "SELECT * INTO \"system_setting_row\" FROM \"system_setting\";",
    "333": "INSERT INTO \"member_count\" (\"total_count\")\n        SELECT \"total_count\" FROM \"member_count_view\";",
    "334": "------------------------------------\n-- Calculation of harmonic weight --\n------------------------------------\n\n\nCREATE VIEW \"remaining_harmonic_supporter_weight\" AS\n  SELECT\n    \"direct_interest_snapshot\".\"issue_id\",\n    \"direct_interest_snapshot\".\"event\",\n    \"direct_interest_snapshot\".\"member_id\",\n    \"direct_interest_snapshot\".\"weight\" AS \"weight_num\",\n    count(\"initiative\".\"id\") AS \"weight_den\"\n  FROM \"issue\"\n  JOIN \"direct_interest_snapshot\"\n    ON \"issue\".\"id\" = \"direct_interest_snapshot\".\"issue_id\"\n    AND \"issue\".\"latest_snapshot_event\" = \"direct_interest_snapshot\".\"event\"\n  JOIN \"initiative\"\n    ON \"issue\".\"id\" = \"initiative\".\"issue_id\"\n    AND \"initiative\".\"harmonic_weight\" ISNULL\n  JOIN \"direct_supporter_snapshot\"\n    ON \"initiative\".\"id\" = \"direct_supporter_snapshot\".\"initiative_id\"\n    AND \"direct_interest_snapshot\".\"event\" = \"direct_supporter_snapshot\".\"event\"\n    AND \"direct_interest_snapshot\".\"member_id\" = \"direct_supporter_snapshot\".\"member_id\"\n    AND (\n      \"direct_supporter_snapshot\".\"satisfied\" = TRUE OR\n      coalesce(\"initiative\".\"admitted\", FALSE) = FALSE\n    )\n  GROUP BY\n    \"direct_interest_snapshot\".\"issue_id\",\n    \"direct_interest_snapshot\".\"event\",\n    \"direct_interest_snapshot\".\"member_id\",\n    \"direct_interest_snapshot\".\"weight\";",
    "335": "CREATE VIEW \"remaining_harmonic_initiative_weight_summands\" AS\n  SELECT\n    \"initiative\".\"issue_id\",\n    \"initiative\".\"id\" AS \"initiative_id\",\n    \"initiative\".\"admitted\",\n    sum(\"remaining_harmonic_supporter_weight\".\"weight_num\") AS \"weight_num\",\n    \"remaining_harmonic_supporter_weight\".\"weight_den\"\n  FROM \"remaining_harmonic_supporter_weight\"\n  JOIN \"initiative\"\n    ON \"remaining_harmonic_supporter_weight\".\"issue_id\" = \"initiative\".\"issue_id\"\n    AND \"initiative\".\"harmonic_weight\" ISNULL\n  JOIN \"direct_supporter_snapshot\"\n    ON \"initiative\".\"id\" = \"direct_supporter_snapshot\".\"initiative_id\"\n    AND \"remaining_harmonic_supporter_weight\".\"event\" = \"direct_supporter_snapshot\".\"event\"\n    AND \"remaining_harmonic_supporter_weight\".\"member_id\" = \"direct_supporter_snapshot\".\"member_id\"\n    AND (\n      \"direct_supporter_snapshot\".\"satisfied\" = TRUE OR\n      coalesce(\"initiative\".\"admitted\", FALSE) = FALSE\n    )\n  GROUP BY\n    \"initiative\".\"issue_id\",\n    \"initiative\".\"id\",\n    \"initiative\".\"admitted\",\n    \"remaining_harmonic_supporter_weight\".\"weight_den\";",
    "336": "CREATE VIEW \"remaining_harmonic_initiative_weight_dummies\" AS\n  SELECT\n    \"issue_id\",\n    \"id\" AS \"initiative_id\",\n    \"admitted\",\n    0 AS \"weight_num\",\n    1 AS \"weight_den\"\n  FROM \"initiative\"\n  WHERE \"harmonic_weight\" ISNULL;",
    "337": "INSERT INTO \"direct_population_snapshot\"\n        (\"issue_id\", \"event\", \"member_id\")\n        SELECT\n          \"issue_id_p\"                 AS \"issue_id\",\n          'periodic'::\"snapshot_event\" AS \"event\",\n          \"member\".\"id\"                AS \"member_id\"\n        FROM \"issue\"\n        JOIN \"area\" ON \"issue\".\"area_id\" = \"area\".\"id\"\n        JOIN \"membership\" ON \"area\".\"id\" = \"membership\".\"area_id\"\n        JOIN \"member\" ON \"membership\".\"member_id\" = \"member\".\"id\"\n        JOIN \"privilege\"\n          ON \"privilege\".\"unit_id\" = \"area\".\"unit_id\"\n          AND \"privilege\".\"member_id\" = \"member\".\"id\"\n        WHERE \"issue\".\"id\" = \"issue_id_p\"\n        AND \"member\".\"active\" AND \"privilege\".\"voting_right\"\n        UNION\n        SELECT\n          \"issue_id_p\"                 AS \"issue_id\",\n          'periodic'::\"snapshot_event\" AS \"event\",\n          \"member\".\"id\"                AS \"member_id\"\n        FROM \"issue\"\n        JOIN \"area\" ON \"issue\".\"area_id\" = \"area\".\"id\"\n        JOIN \"interest\" ON \"issue\".\"id\" = \"interest\".\"issue_id\"\n        JOIN \"member\" ON \"interest\".\"member_id\" = \"member\".\"id\"\n        JOIN \"privilege\"\n          ON \"privilege\".\"unit_id\" = \"area\".\"unit_id\"\n          AND \"privilege\".\"member_id\" = \"member\".\"id\"\n        WHERE \"issue\".\"id\" = \"issue_id_p\"\n        AND \"member\".\"active\" AND \"privilege\".\"voting_right\";",
    "338": "INSERT INTO \"direct_interest_snapshot\"\n        (\"issue_id\", \"event\", \"member_id\")\n        SELECT\n          \"issue_id_p\"  AS \"issue_id\",\n          'periodic'    AS \"event\",\n          \"member\".\"id\" AS \"member_id\"\n        FROM \"issue\"\n        JOIN \"area\" ON \"issue\".\"area_id\" = \"area\".\"id\"\n        JOIN \"interest\" ON \"issue\".\"id\" = \"interest\".\"issue_id\"\n        JOIN \"member\" ON \"interest\".\"member_id\" = \"member\".\"id\"\n        JOIN \"privilege\"\n          ON \"privilege\".\"unit_id\" = \"area\".\"unit_id\"\n          AND \"privilege\".\"member_id\" = \"member\".\"id\"\n        WHERE \"issue\".\"id\" = \"issue_id_p\"\n        AND \"member\".\"active\" AND \"privilege\".\"voting_right\";",
    "339": "INSERT INTO \"direct_supporter_snapshot\"\n        ( \"issue_id\", \"initiative_id\", \"event\", \"member_id\",\n          \"draft_id\", \"informed\", \"satisfied\" )\n        SELECT\n          \"issue_id_p\"            AS \"issue_id\",\n          \"initiative\".\"id\"       AS \"initiative_id\",\n          'periodic'              AS \"event\",\n          \"supporter\".\"member_id\" AS \"member_id\",\n          \"supporter\".\"draft_id\"  AS \"draft_id\",\n          \"supporter\".\"draft_id\" = \"current_draft\".\"id\" AS \"informed\",\n          NOT EXISTS (\n            SELECT NULL FROM \"critical_opinion\"\n            WHERE \"initiative_id\" = \"initiative\".\"id\"\n            AND \"member_id\" = \"supporter\".\"member_id\"\n          ) AS \"satisfied\"\n        FROM \"initiative\"\n        JOIN \"supporter\"\n        ON \"supporter\".\"initiative_id\" = \"initiative\".\"id\"\n        JOIN \"current_draft\"\n        ON \"initiative\".\"id\" = \"current_draft\".\"initiative_id\"\n        JOIN \"direct_interest_snapshot\"\n        ON \"supporter\".\"member_id\" = \"direct_interest_snapshot\".\"member_id\"\n        AND \"initiative\".\"issue_id\" = \"direct_interest_snapshot\".\"issue_id\"\n        AND \"event\" = 'periodic'\n        WHERE \"initiative\".\"issue_id\" = \"issue_id_p\";",
    "340": "UPDATE \"issue\" SET\n        \"snapshot\" = coalesce(\"phase_finished\", now()),\n        \"latest_snapshot_event\" = 'periodic',\n        \"population\" = (\n          SELECT coalesce(sum(\"weight\"), 0)\n          FROM \"direct_population_snapshot\"\n          WHERE \"issue_id\" = \"issue_id_p\"\n          AND \"event\" = 'periodic'\n        )\n        WHERE \"id\" = \"issue_id_p\";",
    "341": "SELECT \"area_id\" INTO \"area_id_v\" FROM \"issue\" WHERE \"id\" = \"issue_id_p\";",
    "342": "SELECT \"unit_id\" INTO \"unit_id_v\" FROM \"area\"  WHERE \"id\" = \"area_id_v\";",
    "343": "-- delete votes from non-privileged voters:\n      DELETE FROM \"direct_voter\"\n        USING (\n          SELECT\n            \"direct_voter\".\"member_id\"\n          FROM \"direct_voter\"\n          JOIN \"member\" ON \"direct_voter\".\"member_id\" = \"member\".\"id\"\n          LEFT JOIN \"privilege\"\n          ON \"privilege\".\"unit_id\" = \"unit_id_v\"\n          AND \"privilege\".\"member_id\" = \"direct_voter\".\"member_id\"\n          WHERE \"direct_voter\".\"issue_id\" = \"issue_id_p\" AND (\n            \"member\".\"active\" = FALSE OR\n            \"privilege\".\"voting_right\" ISNULL OR\n            \"privilege\".\"voting_right\" = FALSE\n          )\n        ) AS \"subquery\"\n        WHERE \"direct_voter\".\"issue_id\" = \"issue_id_p\"\n        AND \"direct_voter\".\"member_id\" = \"subquery\".\"member_id\";",
    "344": "INSERT INTO \"battle\" (\n        \"issue_id\",\n        \"winning_initiative_id\", \"losing_initiative_id\",\n        \"count\"\n      ) SELECT\n        \"issue_id\",\n        \"winning_initiative_id\", \"losing_initiative_id\",\n        \"count\"\n        FROM \"battle_view\" WHERE \"issue_id\" = \"issue_id_p\";",
    "345": "-- set voter count:\n      UPDATE \"issue\" SET\n        \"voter_count\" = (\n          SELECT coalesce(sum(\"weight\"), 0)\n          FROM \"direct_voter\" WHERE \"issue_id\" = \"issue_id_p\"\n        )\n        WHERE \"id\" = \"issue_id_p\";",
    "346": "SELECT * INTO \"issue_row\"\n        FROM \"issue\" WHERE \"id\" = \"issue_id_p\";",
    "347": "SELECT * INTO \"policy_row\"\n        FROM \"policy\" WHERE \"id\" = \"issue_row\".\"policy_id\";",
    "348": "SELECT count(1) INTO \"dimension_v\"\n        FROM \"battle_participant\" WHERE \"issue_id\" = \"issue_id_p\";",
    "349": "-- mark final winner:\n      UPDATE \"initiative\" SET \"winner\" = TRUE\n        FROM (\n          SELECT \"id\" AS \"initiative_id\"\n          FROM \"initiative\"\n          WHERE \"issue_id\" = \"issue_id_p\" AND \"eligible\"\n          ORDER BY\n            \"schulze_rank\",\n            \"id\"\n          LIMIT 1\n        ) AS \"subquery\"\n        WHERE \"id\" = \"subquery\".\"initiative_id\";",
    "350": "SELECT * INTO \"issue_row\" FROM \"issue\" WHERE \"id\" = \"issue_id_p\";",
    "351": "SELECT * INTO \"policy_row\" FROM \"policy\"\n              WHERE \"id\" = \"issue_row\".\"policy_id\";",
    "352": "SELECT * INTO \"policy_row\"\n          FROM \"policy\" WHERE \"id\" = \"issue_row\".\"policy_id\";",
    "353": "SELECT * INTO \"policy_row\" FROM \"policy\"\n            WHERE \"id\" = \"issue_row\".\"policy_id\";",
    "354": "elsif lst in (chr(10),chr(13)) or lst is null then\n    lst := q'{select * from &&buf}';",
    "355": "d('select t.* from (', ') t order by '||lla('s')||' nulls last', lla('s') is not null and lla('c') is null);",
    "356": "d('select t.* from (', ') t where '|| laa);",
    "357": "d('select t.* from (', ') t where '||lla('w'), lla('w') is not null);",
    "358": "d('select t.* from (', ') t where inst_id in ('||lla('i')||')', lla('i') is not null);",
    "359": "d('select t.* from (', ') t where rn_<='||sub(lla('n'),'/',1));",
    "360": "d('select (select begin_interval_time from dba_hist_snapshot p where p.snap_id=t.snap_id) snap_time, t.* from (', ') t where (select begin_interval_time from dba_hist_snapshot p where p.snap_id=t.snap_id) between sysdate-'||nvl(laa, 99999)||' and sysdate-'||nvl(lab,0));",
    "361": "d('select '||lcs||' from (', ') t');",
    "362": "d('select '||lla('c')||' from (', ') t group by '||substr(lla('c'), 1, lcn-1));",
    "363": "d('select t.* from (', ') t order by '||lla('s')||' nulls last', lla('s') is not null);",
    "364": "WITH src\nAS (SELECT\n      [Object] = o.name,\n      [Type] = o.type_desc,\n      [Index] = COALESCE(i.name, ''),\n      [Index_Type] = i.type_desc,\n      p.[object_id],\n      p.index_id,\n      au.allocation_unit_id\n    FROM sys.partitions AS p\n      INNER JOIN sys.allocation_units AS au ON p.hobt_id = au.container_id\n      INNER JOIN sys.objects AS o ON p.[object_id] = o.[object_id]\n      INNER JOIN sys.indexes AS i ON o.[object_id] = i.[object_id] AND p.index_id = i.index_id\n    WHERE au.[type] IN (1, 2, 3)\n      AND o.is_ms_shipped = 0)\nSELECT\n  src.[Object],\n  src.[Type],\n  src.[Index],\n  src.Index_Type,\n  buffer_pages = COUNT_BIG(b.page_id),\n  buffer_mb = COUNT_BIG(b.page_id) / 128\nFROM src\n  INNER JOIN sys.dm_os_buffer_descriptors AS b ON src.allocation_unit_id = b.allocation_unit_id\nWHERE b.database_id = DB_ID()\nGROUP BY src.[Object],\n         src.[Type],\n         src.[Index],\n         src.Index_Type\nORDER BY buffer_pages DESC;",
    "365": "WITH TMP AS\n(\n\tSELECT TOP 10\n\t\tCAST(SUM(s.total_elapsed_time) / 1000000.0 AS DECIMAL(10, 2)) AS [Total Elapsed Time in S],\n\t\tSUM(s.execution_count) AS [Total Execution Count],\n\t\tCAST(SUM(s.total_worker_time) / 1000000.0 AS DECIMAL(10, 2)) AS [Total CPU Time in S],\n\t\tCAST(SUM(s.total_worker_time) / SUM(s.execution_count) / 1000.0 AS DECIMAL(10, 2)) AS [Avg CPU Time in MS],\n\t\tSUM(s.total_logical_reads) AS [Total Logical Reads],\n\t\tCAST(CAST(SUM(s.total_logical_reads) AS FLOAT) / CAST(SUM(s.execution_count) AS FLOAT) AS DECIMAL(20, 2)) AS [Avg Logical Reads],\n\t\tSUM(s.total_logical_writes) AS [Total Logical Writes],\n\tCAST(CAST(SUM(s.total_logical_writes) AS FLOAT) / CAST(SUM(s.execution_count) AS FLOAT) AS DECIMAL(20, 2)) AS [Avg Logical Writes],\n\t\tSUM(s.total_clr_time) AS [Total CLR Time],\n\t\tCAST(SUM(s.total_clr_time) / SUM(s.execution_count) / 1000.0 AS DECIMAL(20, 2)) AS [Avg CLR Time in MS],\n\t--\tCAST(SUM(s.min_worker_time) / 1000.0 AS DECIMAL(10, 2)) AS [Min CPU Time in MS],\n\t--\tCAST(SUM(s.max_worker_time) / 1000.0 AS DECIMAL(10, 2)) AS [Max CPU Time in MS],\n\t\tSUM(s.min_logical_reads) AS [Min Logical Reads],\n\t\tSUM(s.max_logical_reads) AS [Max Logical Reads],\n\t\tSUM(s.min_logical_writes) AS [Min Logical Writes],\n\t\tSUM(s.max_logical_writes) AS [Max Logical Writes],\n\t--\tCAST(SUM(s.min_clr_time) / 1000.0 AS DECIMAL(10, 2)) AS [Min CLR Time in MS],\n\t---\tCAST(SUM(s.max_clr_time) / 1000.0 AS DECIMAL(10, 2)) AS [Max CLR Time in MS],\n\t\tCOUNT(1) AS [Number of Statements],\n\t\tMAX(s.last_execution_time) AS [Last Execution Time],\n\t\ts.plan_handle AS [Plan Handle]\n\tFROM\n\t\tsys.dm_exec_query_stats s\n\t\t--where execution_count>0\n\t-- Most CPU consuming\n\t--GROUP BY s.plan_handle ORDER BY SUM(s.total_worker_time) DESC\n\t\t\n\t-- Most read+write IO consuming\n\tGROUP BY s.plan_handle ORDER BY SUM(s.total_logical_reads + s.total_logical_writes) DESC\n\t\t\n\t-- Most write IO consuming\n\t--GROUP BY s.plan_handle ORDER BY SUM(s.total_logical_writes) DESC\n\t\t\n\t-- Most CLR consuming\n\t--WHERE s.total_clr_time > 0 GROUP BY s.plan_handle ORDER BY SUM(s.total_clr_time) DESC\n)\nSELECT\n\tTMP.*,\n\tst.text AS [Query],\n\tqp.query_plan AS [Plan],qp.dbid\nFROM\n\tTMP\nOUTER APPLY\n\tsys.dm_exec_query_plan(TMP.[Plan Handle]) AS qp\nOUTER APPLY\n\tsys.dm_exec_sql_text(TMP.[Plan Handle]) AS st\n\n\n\t\n select 'worst CPU';",
    "366": "SELECT pg_catalog.set_config('search_path', '', false);",
    "367": "-- Add one to the offset to get the correct starting row\n\tSELECT @Offset = @Offset + 1;",
    "368": "SELECT @sql_command = '\n\tWITH CTE_PRODUCTS AS (\n\t\tSELECT\n\t\t\tROW_NUMBER() OVER (ORDER BY OrderDate ASC) AS rownum,\n\t\t\tSalesOrderHeader.SalesOrderID,\n\t\t\tSalesOrderHeader.Status,\n\t\t\tSalesOrderHeader.OrderDate,\n\t\t\tSalesOrderHeader.ShipDate,\n\t\t\tSalesOrderDetail.UnitPrice,\n\t\t\tSalesOrderDetail.LineTotal\n\t\tFROM Sales.SalesOrderHeader\n\t\tINNER JOIN Sales.SalesOrderDetail\n\t\tON SalesOrderHeader.SalesOrderID = SalesOrderDetail.SalesOrderID\n\t\tWHERE SalesOrderHeader.SalesPersonID = @SalesPersonID\n\t\t)\n\tSELECT\n\t\t*\n\tFROM CTE_PRODUCTS\n\tWHERE rownum BETWEEN @Offset AND @Offset + @RowCount;",
    "369": "SELECT @sql_command = '\n\tWITH CTE_PRODUCTS AS (\n\t\tSELECT\n\t\t\tROW_NUMBER() OVER (ORDER BY OrderDate ASC) AS rownum,\n\t\t\tSalesOrderHeader.SalesOrderID,\n\t\t\tSalesOrderHeader.Status,\n\t\t\tSalesOrderHeader.OrderDate,\n\t\t\tSalesOrderHeader.ShipDate,\n\t\t\tSalesOrderDetail.UnitPrice,\n\t\t\tSalesOrderDetail.LineTotal\n\t\tFROM Sales.SalesOrderHeader\n\t\tINNER JOIN Sales.SalesOrderDetail\n\t\tON SalesOrderHeader.SalesOrderID = SalesOrderDetail.SalesOrderID\n\t\tWHERE SalesOrderHeader.SalesPersonID = @SalesPersonID\n\t\t)\n\tSELECT\n\t\t*\n\tFROM CTE_PRODUCTS\n\tWHERE rownum BETWEEN @Offset AND @Offset + @RowCount\n\tOPTION (RECOMPILE);",
    "370": "SELECT\n\t\tPRODUCT.Name,\n\t\tPRODUCT.ProductID,\n\t\tPRODUCT.ProductModelID,\n\t\tPRODUCT.ProductNumber,\n\t\tMODEL.Name\n\tFROM Production.Product PRODUCT\n\tINNER JOIN Production.ProductModel MODEL\n\tON MODEL.ProductModelID = PRODUCT.ProductModelID\n\tWHERE PRODUCT.ProductModelID BETWEEN @ProductModelID1 AND @ProductModelID2;",
    "371": "SELECT @sql_command = '\n\t\tSELECT\n\t\t\tPRODUCT.Name,\n\t\t\tPRODUCT.ProductID,\n\t\t\tPRODUCT.ProductModelID,\n\t\t\tPRODUCT.ProductNumber,\n\t\t\tMODEL.Name\n\t\tFROM Production.Product PRODUCT\n\t\tINNER JOIN Production.ProductModel MODEL\n\t\tON MODEL.ProductModelID = PRODUCT.ProductModelID\n\t\tWHERE PRODUCT.ProductModelID BETWEEN ' + CAST(@firstProductModelID AS NVARCHAR(MAX)) + ' AND ' + CAST(@lastProductModelID AS NVARCHAR(MAX)) + ';",
    "372": "SELECT @sql_command = '\n\tSELECT\n\t\t*\n\tFROM Person.Person\n\tWHERE FirstName = ''' + @FirstName + ''';",
    "373": "SELECT @sql_command = '\n\tSELECT\n\t\t*\n\tFROM Person.Person\n\tWHERE FirstName = ''' + @FirstName + ''';",
    "374": "SELECT @sql_command = '\n\tSELECT\n\t\t*\n\tFROM Person.Person\n\tWHERE FirstName = @first_name;",
    "375": "SELECT @sql_command = @sql_command + '\n\tWHERE 1 = 1';",
    "376": "SELECT @product_number = '%' + @product_number + '%';",
    "377": "SELECT @product_model = '%' + @product_model + '%';",
    "378": "SELECT\n\t\tProduct.Name AS product_name,\n\t\tProduct.ProductNumber AS product_number,\n\t\tProductModel.Name AS product_model_name,\n\t\tProductModel.CatalogDescription AS productmodel_catalog_description,\n\t\tProductSubcategory.Name AS product_subcategory_name,\n\t\tProductSubcategory.ModifiedDate AS product_subcategory_modified_date,\n\t\tSizeUnitMeasureCode.Name AS size_unit_measure_code,\n\t\tWeightUnitMeasureCode.Name AS weight_unit_measure_code,\n\t\tProduct.Color AS product_color,\n\t\tProduct.SafetyStockLevel AS product_safety_stock_level,\n\t\tProduct.ReorderPoint AS product_reorderpoint,\n\t\tProduct.StandardCost AS product_standard_cost\n\tFROM Production.Product\n\tLEFT JOIN Production.ProductModel\n\tON Product.ProductModelID = ProductModel.ProductModelID\n\tLEFT JOIN Production.ProductSubcategory\n\tON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID\n\tLEFT JOIN Production.UnitMeasure SizeUnitMeasureCode\n\tON Product.SizeUnitMeasureCode = SizeUnitMeasureCode.UnitMeasureCode\n\tLEFT JOIN Production.UnitMeasure WeightUnitMeasureCode\n\tON Product.WeightUnitMeasureCode = SizeUnitMeasureCode.UnitMeasureCode\n\tWHERE (Product.Name LIKE @product_name OR @product_name IS NULL)\n\tAND (Product.ProductNumber LIKE @product_number OR @product_number IS NULL)\n\tAND (ProductModel.Name LIKE @product_model OR @product_model IS NULL)\n\tAND (ProductSubcategory.Name = @product_subcategory OR @product_subcategory IS NULL)\n\tAND (SizeUnitMeasureCode.Name = @product_sizemeasurecode OR @product_sizemeasurecode IS NULL)\n\tAND (WeightUnitMeasureCode.Name = @product_weightunitmeasurecode OR @product_weightunitmeasurecode IS NULL);",
    "379": "WITH CTE_PRODUCTS AS (\n\tSELECT\n\t\tROW_NUMBER() OVER (ORDER BY OrderDate ASC) AS rownum,\n\t\tSalesOrderHeader.SalesOrderID,\n\t\tSalesOrderHeader.Status,\n\t\tSalesOrderHeader.OrderDate,\n\t\tSalesOrderHeader.ShipDate,\n\t\tSalesOrderDetail.UnitPrice,\n\t\tSalesOrderDetail.LineTotal\n\tFROM Sales.SalesOrderHeader\n\tINNER JOIN Sales.SalesOrderDetail\n\tON SalesOrderHeader.SalesOrderID = SalesOrderDetail.SalesOrderID\n\tWHERE SalesOrderHeader.SalesPersonID = 277\n\t)\nSELECT\n\t*\nFROM CTE_PRODUCTS\nWHERE rownum BETWEEN 51 AND 75;",
    "380": "SELECT @@ROWCOUNT AS total_result_count;",
    "381": "SELECT * FROM #orders WHERE rownum BETWEEN 1 AND 25;",
    "382": "SELECT * FROM #orders WHERE rownum BETWEEN 26 AND 50;",
    "383": "SELECT * FROM #orders WHERE rownum BETWEEN 51 AND 75;",
    "384": "SELECT * FROM #orders WHERE rownum BETWEEN 76 AND 100;",
    "385": "SELECT @sql_command = '\n\tSELECT\n\t\tPurchaseOrderHeader.PurchaseOrderID,\n\t\tPurchaseOrderHeader.OrderDate,\n\t\tPurchaseOrderHeader.ShipDate,\n\t\tPurchaseOrderHeader.SubTotal,\n\t\tPurchaseOrderHeader.Freight';",
    "386": "SELECT @sql_command = @sql_command + '\n\tFROM purchasing.PurchaseOrderHeader\n\tINNER JOIN purchasing.PurchaseOrderDetail\n\tON PurchaseOrderHeader.PurchaseOrderID = PurchaseOrderDetail.PurchaseOrderID';",
    "387": "SELECT @sql_command = @sql_command + '\n\tWHERE PurchaseOrderHeader.Status = 2';",
    "388": "SELECT\n\tProductID,\n\tWeight,\n\tName\nFROM Production.Product\nWHERE Weight = 170;",
    "389": "SELECT\n\tSalesOrderDetail.SalesOrderDetailID,\n\tSalesOrderDetail.SalesOrderID,\n\tSalesOrderDetail.ProductID,\n\tSalesOrderHeader.OrderDate\nFROM Sales.SalesOrderDetail\nINNER MERGE JOIN Sales.SalesOrderHeader\nON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID\nWHERE ProductID = @ProductID;",
    "390": "SELECT\n\tSalesOrderDetail.SalesOrderDetailID,\n\tSalesOrderDetail.SalesOrderID,\n\tSalesOrderDetail.ProductID,\n\tSalesOrderHeader.OrderDate\nFROM Sales.SalesOrderDetail\nINNER HASH JOIN Sales.SalesOrderHeader\nON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID\nWHERE ProductID = @ProductID;",
    "391": "SELECT\n\tSalesOrderDetail.SalesOrderDetailID,\n\tSalesOrderDetail.SalesOrderID,\n\tSalesOrderDetail.ProductID,\n\tSalesOrderHeader.OrderDate\nFROM Sales.SalesOrderDetail\nINNER JOIN Sales.SalesOrderHeader\nON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID\nWHERE ProductID = @ProductID\nOPTION (RECOMPILE);",
    "392": "SELECT lo_import(p_path) \n    INTO l_oid;",
    "393": "CREATE OR REPLACE FUNCTION DumpXMLFile()\nRETURNS VOID AS\n$$\nBEGIN\n    \n  INSERT INTO xmlimport.xml_file_import (txt)\n  SELECT convert_from(\n    xmlimport.bytea_import('/tmp/l3.xml'), \n    'utf8'\n  )::XML AS txt;",
    "394": "-- SELECT SplitIntoXMLNodes('//SchoolList/Student');",
    "395": "BEGIN\n \n  PERFORM xmlimport.dblink(\n    'dbname=' || current_database(), \n    FORMAT(\n      $q$\n        INSERT INTO xmlimport.xml_nodes(xmlnode)\n        SELECT %s::TEXT\n      $q$::TEXT, \n      quote_literal(r)\n    )\n  ) AS a\n  FROM unnest(\n    xpath(\n      _XPathSeparator, \n      (\n        SELECT txt \n        FROM xmlimport.xml_file_import\n      )::XML\n    )\n  ) a(r);",
    "396": "CREATE OR REPLACE FUNCTION GetSubNodeFromNode(XML, TEXT) RETURNS XML AS\n$$\n  SELECT *\n  FROM  unnest(\n    xpath(\n      '//' || $2, \n      $1\n    )\n  )\n  LIMIT 1\n$$ LANGUAGE SQL;",
    "397": "CREATE OR REPLACE FUNCTION GetLevel1FromNode(XML, TEXT) RETURNS TEXT AS\n$$\n  SELECT extract_value(\n    '//*[name()=''' || $2 || ''']', \n    $1\n  )\n$$ LANGUAGE SQL;",
    "398": "CREATE OR REPLACE FUNCTION GetLevel2FromNode(XML, TEXT, TEXT) RETURNS TEXT AS\n$$\n  SELECT extract_value(\n    '//*[name()=''' || $2 || ''']/*[name()=''' || $3 || ''']', \n    $1\n  )\n$$ LANGUAGE SQL;",
    "399": "CREATE OR REPLACE FUNCTION GetArgumentFromNode(XML, TEXT) RETURNS TEXT AS\n$$\n  SELECT extract_value('@' || $2, $1)\n$$ LANGUAGE SQL;",
    "400": "SELECT user_id INTO v_user_id FROM users WHERE user_login='AUTOSEND';",
    "401": "Owner: edge\n--\n\nCREATE VIEW v_consented AS\n SELECT patients.patient_id,\n    patients.mrn,\n    patients.patient_name,\n    patients.dob,\n    patients.sex,\n    patients.street,\n    patients.city,\n    patients.state,\n    patients.zip_code,\n    patients.email_address,\n    patients.rsna_id,\n    patients.modified_date,\n    patients.consent_timestamp\n   FROM patients\n  WHERE (patients.consent_timestamp IS NOT NULL);",
    "402": "Owner: edge\n--\n\nCREATE VIEW v_exam_status AS\n SELECT p.patient_id,\n    p.mrn,\n    p.patient_name,\n    p.dob,\n    p.sex,\n    p.street,\n    p.city,\n    p.state,\n    p.zip_code,\n    p.email_address,\n    e.exam_id,\n    e.accession_number,\n    e.exam_description,\n    r.report_id,\n    r.status,\n    r.status_timestamp,\n    r.report_text,\n    r.dictator,\n    r.transcriber,\n    r.signer\n   FROM ((patients p\n     JOIN exams e ON ((p.patient_id = e.patient_id)))\n     JOIN ( SELECT r1.report_id,\n            r1.exam_id,\n            r1.proc_code,\n            r1.status,\n            r1.status_timestamp,\n            r1.report_text,\n            r1.signer,\n            r1.dictator,\n            r1.transcriber,\n            r1.modified_date\n           FROM reports r1\n          WHERE (r1.report_id = ( SELECT r2.report_id\n                   FROM reports r2\n                  WHERE (r2.exam_id = r1.exam_id)\n                  ORDER BY r2.report_id DESC\n                 LIMIT 1))) r ON ((e.exam_id = r.exam_id)));",
    "403": "Owner: edge\n--\n\nCREATE VIEW v_exams_sent AS\n SELECT transactions.transaction_id,\n    transactions.job_id,\n    transactions.status_code,\n    transactions.comments,\n    transactions.modified_date\n   FROM transactions\n  WHERE (transactions.status_code = 40);",
    "404": "Owner: edge\n--\n\nCREATE VIEW v_job_status AS\n SELECT js.job_set_id,\n    j.job_id,\n    j.exam_id,\n    js.delay_in_hrs,\n    t.status,\n    t.status_message,\n    t.modified_date AS last_transaction_timestamp,\n    js.single_use_patient_id,\n    js.email_address,\n    js.phone_number,\n    t.comments,\n    js.send_on_complete,\n    js.access_code,\n    j.remaining_retries,\n    js.send_to_site\n   FROM ((jobs j\n     JOIN job_sets js ON ((j.job_set_id = js.job_set_id)))\n     JOIN ( SELECT t1.job_id,\n            t1.status_code AS status,\n            sc.description AS status_message,\n            t1.comments,\n            t1.modified_date\n           FROM (transactions t1\n             JOIN status_codes sc ON ((t1.status_code = sc.status_code)))\n          WHERE (t1.modified_date = ( SELECT max(t2.modified_date) AS max\n                   FROM transactions t2\n                  WHERE (t2.job_id = t1.job_id)))) t ON ((j.job_id = t.job_id)));",
    "405": "Owner: edge\n--\n\nCREATE VIEW v_patients_sent AS\n SELECT DISTINCT job_sets.patient_id\n   FROM transactions,\n    jobs,\n    job_sets\n  WHERE ((transactions.status_code = 40) AND (transactions.job_id = jobs.job_id) AND (jobs.job_set_id = job_sets.job_set_id));",
    "406": "Owner: edge\n--\n\nSELECT pg_catalog.setval('devices_device_id_seq', 1, true);",
    "407": "Owner: edge\n--\n\nSELECT pg_catalog.setval('email_jobs_email_job_id_seq', 1, false);",
    "408": "Owner: edge\n--\n\nSELECT pg_catalog.setval('exams_exam_id_seq', 101, true);",
    "409": "Owner: edge\n--\n\nSELECT pg_catalog.setval('hipaa_audit_accession_numbers_id_seq', 388, true);",
    "410": "Owner: edge\n--\n\nSELECT pg_catalog.setval('hipaa_audit_mrns_id_seq', 2220, true);",
    "411": "Owner: edge\n--\n\nSELECT pg_catalog.setval('hipaa_audit_views_id_seq', 1662, true);",
    "412": "Owner: edge\n--\n\nSELECT pg_catalog.setval('job_sets_job_set_id_seq', 112, true);",
    "413": "Owner: edge\n--\n\nSELECT pg_catalog.setval('jobs_job_id_seq', 114, true);",
    "414": "Owner: edge\n--\n\nSELECT pg_catalog.setval('patient_merge_events_event_id_seq', 1, false);",
    "415": "Owner: edge\n--\n\nSELECT pg_catalog.setval('patients_patient_id_seq', 90, true);",
    "416": "Owner: edge\n--\n\nSELECT pg_catalog.setval('reports_report_id_seq', 186, true);",
    "417": "Owner: edge\n--\n\nSELECT pg_catalog.setval('schema_version_id_seq', 1, false);",
    "418": "Owner: edge\n--\n\nSELECT pg_catalog.setval('sms_jobs_sms_job_id_seq', 1, false);",
    "419": "Owner: edge\n--\n\nSELECT pg_catalog.setval('studies_study_id_seq', 236, true);",
    "420": "Owner: edge\n--\n\nSELECT pg_catalog.setval('transactions_transaction_id_seq', 16078, true);",
    "421": "Owner: edge\n--\n\nSELECT pg_catalog.setval('users_user_id_seq', 10, true);",
    "422": "SELECT pg_catalog.set_config('search_path', '', false);",
    "423": "-- Refresh the user\n  select * into v_user from app_public.users where id = v_user.id;",
    "424": "begin\n  select users.* into v_user\n  from app_public.users\n  where id = app_public.current_user_id();",
    "425": "select * into v_user_secret\n    from app_private.user_secrets\n    where user_secrets.user_id = app_public.current_user_id();",
    "426": "Owner: -\n--\n\nCREATE FUNCTION app_public.current_session_id() RETURNS uuid\n    LANGUAGE sql STABLE\n    AS $$\n  select nullif(pg_catalog.current_setting('jwt.claims.session_id', true), '')::uuid;",
    "427": "Owner: -\n--\n\nCREATE FUNCTION app_public.\"current_user\"() RETURNS app_public.users\n    LANGUAGE sql STABLE\n    AS $$\n  select users.* from app_public.users where id = app_public.current_user_id();",
    "428": "Owner: -\n--\n\nCREATE FUNCTION app_public.current_user_id() RETURNS uuid\n    LANGUAGE sql STABLE SECURITY DEFINER\n    SET search_path TO 'pg_catalog', 'public', 'pg_temp'\n    AS $$\n  select user_id from app_private.sessions where uuid = app_public.current_session_id();",
    "429": "Owner: -\n--\n\nCREATE FUNCTION app_public.current_user_invited_organization_ids() RETURNS SETOF uuid\n    LANGUAGE sql STABLE SECURITY DEFINER\n    SET search_path TO 'pg_catalog', 'public', 'pg_temp'\n    AS $$\n  select organization_id from app_public.organization_invitations\n    where user_id = app_public.current_user_id();",
    "430": "Owner: -\n--\n\nCREATE FUNCTION app_public.current_user_member_organization_ids() RETURNS SETOF uuid\n    LANGUAGE sql STABLE SECURITY DEFINER\n    SET search_path TO 'pg_catalog', 'public', 'pg_temp'\n    AS $$\n  select organization_id from app_public.organization_memberships\n    where user_id = app_public.current_user_id();",
    "431": "begin\n  -- Find the matching user_email:\n  select user_emails.* into v_user_email\n  from app_public.user_emails\n  where user_emails.email = forgot_password.email\n  order by is_verified desc, id desc;",
    "432": "select * into v_user from app_public.users where users.username = invite_to_organization.username;",
    "433": "begin\n  select * into v_user_email from app_public.user_emails where id = email_id and user_id = app_public.current_user_id();",
    "434": "select * into v_invitation from app_public.organization_invitations where id = invitation_id;",
    "435": "select * into v_organization from app_public.organizations where id = v_invitation.organization_id;",
    "436": "Owner: -\n--\n\nCREATE FUNCTION app_public.organizations_current_user_is_billing_contact(org app_public.organizations) RETURNS boolean\n    LANGUAGE sql STABLE\n    AS $$\n  select exists(\n    select 1\n    from app_public.organization_memberships\n    where organization_id = org.id\n    and user_id = app_public.current_user_id()\n    and is_billing_contact is true\n  )\n$$;",
    "437": "Owner: -\n--\n\nCREATE FUNCTION app_public.organizations_current_user_is_owner(org app_public.organizations) RETURNS boolean\n    LANGUAGE sql STABLE\n    AS $$\n  select exists(\n    select 1\n    from app_public.organization_memberships\n    where organization_id = org.id\n    and user_id = app_public.current_user_id()\n    and is_owner is true\n  )\n$$;",
    "438": "begin\n  select * into v_my_membership\n    from app_public.organization_memberships\n    where organization_memberships.organization_id = remove_from_organization.organization_id\n    and organization_memberships.user_id = app_public.current_user_id();",
    "439": "-- Get the email to send account deletion token to\n  select * into v_user_email\n    from app_public.user_emails\n    where user_id = app_public.current_user_id()\n    order by is_primary desc, is_verified desc, id desc\n    limit 1;",
    "440": "begin\n  select users.* into v_user\n  from app_public.users\n  where id = user_id;",
    "441": "-- Reassign billing contact status back to the organization owner\n  update app_public.organization_memberships\n    set is_billing_contact = true\n    where is_owner = true\n    and organization_id in (\n      select organization_id\n      from app_public.organization_memberships my_memberships\n      where my_memberships.user_id = app_public.current_user_id()\n      and is_billing_contact is true\n    );",
    "442": "select * into v_org from app_public.organizations where id = organization_id;",
    "443": "select * into v_org from app_public.organizations where id = organization_id;",
    "444": "Owner: -\n--\n\nCREATE FUNCTION app_public.users_has_password(u app_public.users) RETURNS boolean\n    LANGUAGE sql STABLE SECURITY DEFINER\n    SET search_path TO 'pg_catalog', 'public', 'pg_temp'\n    AS $$\n  select (password_hash is not null) from app_private.user_secrets where user_secrets.user_id = u.id and u.id = app_public.current_user_id();",
    "445": "Owner: -\n--\n\nCREATE FUNCTION app_public.verify_email(user_email_id uuid, token text) RETURNS boolean\n    LANGUAGE plpgsql STRICT SECURITY DEFINER\n    SET search_path TO 'pg_catalog', 'public', 'pg_temp'\n    AS $$\nbegin\n  update app_public.user_emails\n  set\n    is_verified = true,\n    is_primary = is_primary or not exists(\n      select 1 from app_public.user_emails other_email where other_email.user_id = user_emails.user_id and other_email.is_primary is true\n    )\n  where id = user_email_id\n  and exists(\n    select 1 from app_private.user_email_secrets where user_email_secrets.user_email_id = user_emails.id and verification_token = token\n  );",
    "446": "SELECT pg_catalog.set_config('search_path', '', false);",
    "447": "Owner: admin\n--\n\nCREATE FUNCTION public.generate_code() RETURNS text\n    LANGUAGE sql\n    AS $$\n    SELECT array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',((random()*(36-1)+1)::integer),1) from generate_series(1,16)),'');",
    "448": "Owner: admin\n--\n\nCREATE FUNCTION public.generate_id() RETURNS text\n    LANGUAGE sql\n    AS $$\n    SELECT array_to_string(array(select substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',((random()*(36-1)+1)::integer),1) from generate_series(1,6)),'');"
}